// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// radiationDiurnalPattern
double radiationDiurnalPattern(double t, double daylength);
RcppExport SEXP _medfate_radiationDiurnalPattern(SEXP tSEXP, SEXP daylengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< double >::type daylength(daylengthSEXP);
    rcpp_result_gen = Rcpp::wrap(radiationDiurnalPattern(t, daylength));
    return rcpp_result_gen;
END_RCPP
}
// temperatureDiurnalPattern
double temperatureDiurnalPattern(double t, double tmin, double tmax, double daylength);
RcppExport SEXP _medfate_temperatureDiurnalPattern(SEXP tSEXP, SEXP tminSEXP, SEXP tmaxSEXP, SEXP daylengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< double >::type tmin(tminSEXP);
    Rcpp::traits::input_parameter< double >::type tmax(tmaxSEXP);
    Rcpp::traits::input_parameter< double >::type daylength(daylengthSEXP);
    rcpp_result_gen = Rcpp::wrap(temperatureDiurnalPattern(t, tmin, tmax, daylength));
    return rcpp_result_gen;
END_RCPP
}
// leafTemperature
double leafTemperature(double absRad, double airTemperature, double u, double E, double leafWidth);
RcppExport SEXP _medfate_leafTemperature(SEXP absRadSEXP, SEXP airTemperatureSEXP, SEXP uSEXP, SEXP ESEXP, SEXP leafWidthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type absRad(absRadSEXP);
    Rcpp::traits::input_parameter< double >::type airTemperature(airTemperatureSEXP);
    Rcpp::traits::input_parameter< double >::type u(uSEXP);
    Rcpp::traits::input_parameter< double >::type E(ESEXP);
    Rcpp::traits::input_parameter< double >::type leafWidth(leafWidthSEXP);
    rcpp_result_gen = Rcpp::wrap(leafTemperature(absRad, airTemperature, u, E, leafWidth));
    return rcpp_result_gen;
END_RCPP
}
// FCCSbehaviour
List FCCSbehaviour(DataFrame FCCSpropsSI, NumericVector MliveSI, NumericVector MdeadSI, double slope, double windSpeedSI);
RcppExport SEXP _medfate_FCCSbehaviour(SEXP FCCSpropsSISEXP, SEXP MliveSISEXP, SEXP MdeadSISEXP, SEXP slopeSEXP, SEXP windSpeedSISEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type FCCSpropsSI(FCCSpropsSISEXP);
    Rcpp::traits::input_parameter< NumericVector >::type MliveSI(MliveSISEXP);
    Rcpp::traits::input_parameter< NumericVector >::type MdeadSI(MdeadSISEXP);
    Rcpp::traits::input_parameter< double >::type slope(slopeSEXP);
    Rcpp::traits::input_parameter< double >::type windSpeedSI(windSpeedSISEXP);
    rcpp_result_gen = Rcpp::wrap(FCCSbehaviour(FCCSpropsSI, MliveSI, MdeadSI, slope, windSpeedSI));
    return rcpp_result_gen;
END_RCPP
}
// rothermel
List rothermel(String modeltype, NumericVector wSI, NumericVector sSI, double delta, double mx_dead, NumericVector hSI, NumericVector mSI, double u, double windDir, double slope, double aspect);
RcppExport SEXP _medfate_rothermel(SEXP modeltypeSEXP, SEXP wSISEXP, SEXP sSISEXP, SEXP deltaSEXP, SEXP mx_deadSEXP, SEXP hSISEXP, SEXP mSISEXP, SEXP uSEXP, SEXP windDirSEXP, SEXP slopeSEXP, SEXP aspectSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< String >::type modeltype(modeltypeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type wSI(wSISEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sSI(sSISEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< double >::type mx_dead(mx_deadSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type hSI(hSISEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mSI(mSISEXP);
    Rcpp::traits::input_parameter< double >::type u(uSEXP);
    Rcpp::traits::input_parameter< double >::type windDir(windDirSEXP);
    Rcpp::traits::input_parameter< double >::type slope(slopeSEXP);
    Rcpp::traits::input_parameter< double >::type aspect(aspectSEXP);
    rcpp_result_gen = Rcpp::wrap(rothermel(modeltype, wSI, sSI, delta, mx_dead, hSI, mSI, u, windDir, slope, aspect));
    return rcpp_result_gen;
END_RCPP
}
// genros
double genros(double phi, double theta, double a1, double a2, double b, double n1, double n2, double c);
RcppExport SEXP _medfate_genros(SEXP phiSEXP, SEXP thetaSEXP, SEXP a1SEXP, SEXP a2SEXP, SEXP bSEXP, SEXP n1SEXP, SEXP n2SEXP, SEXP cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< double >::type a2(a2SEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type n1(n1SEXP);
    Rcpp::traits::input_parameter< double >::type n2(n2SEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    rcpp_result_gen = Rcpp::wrap(genros(phi, theta, a1, a2, b, n1, n2, c));
    return rcpp_result_gen;
END_RCPP
}
// ellipseROS
NumericVector ellipseROS(NumericVector phi, double theta, double vws, double ros);
RcppExport SEXP _medfate_ellipseROS(SEXP phiSEXP, SEXP thetaSEXP, SEXP vwsSEXP, SEXP rosSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type vws(vwsSEXP);
    Rcpp::traits::input_parameter< double >::type ros(rosSEXP);
    rcpp_result_gen = Rcpp::wrap(ellipseROS(phi, theta, vws, ros));
    return rcpp_result_gen;
END_RCPP
}
// doubleEllipseROS
NumericVector doubleEllipseROS(NumericVector phi, double theta, double vws, double ros);
RcppExport SEXP _medfate_doubleEllipseROS(SEXP phiSEXP, SEXP thetaSEXP, SEXP vwsSEXP, SEXP rosSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type vws(vwsSEXP);
    Rcpp::traits::input_parameter< double >::type ros(rosSEXP);
    rcpp_result_gen = Rcpp::wrap(doubleEllipseROS(phi, theta, vws, ros));
    return rcpp_result_gen;
END_RCPP
}
// fireBrandFallingHeight
double fireBrandFallingHeight(double initialHeight, double timeFalling, double Dp);
RcppExport SEXP _medfate_fireBrandFallingHeight(SEXP initialHeightSEXP, SEXP timeFallingSEXP, SEXP DpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type initialHeight(initialHeightSEXP);
    Rcpp::traits::input_parameter< double >::type timeFalling(timeFallingSEXP);
    Rcpp::traits::input_parameter< double >::type Dp(DpSEXP);
    rcpp_result_gen = Rcpp::wrap(fireBrandFallingHeight(initialHeight, timeFalling, Dp));
    return rcpp_result_gen;
END_RCPP
}
// totalFirebrandLoftingTime
double totalFirebrandLoftingTime(double z, double z0, double zF, double Dp);
RcppExport SEXP _medfate_totalFirebrandLoftingTime(SEXP zSEXP, SEXP z0SEXP, SEXP zFSEXP, SEXP DpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type z(zSEXP);
    Rcpp::traits::input_parameter< double >::type z0(z0SEXP);
    Rcpp::traits::input_parameter< double >::type zF(zFSEXP);
    Rcpp::traits::input_parameter< double >::type Dp(DpSEXP);
    rcpp_result_gen = Rcpp::wrap(totalFirebrandLoftingTime(z, z0, zF, Dp));
    return rcpp_result_gen;
END_RCPP
}
// totalGasFlowPersistenceTime
double totalGasFlowPersistenceTime(double z, double t0, double zF);
RcppExport SEXP _medfate_totalGasFlowPersistenceTime(SEXP zSEXP, SEXP t0SEXP, SEXP zFSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type z(zSEXP);
    Rcpp::traits::input_parameter< double >::type t0(t0SEXP);
    Rcpp::traits::input_parameter< double >::type zF(zFSEXP);
    rcpp_result_gen = Rcpp::wrap(totalGasFlowPersistenceTime(z, t0, zF));
    return rcpp_result_gen;
END_RCPP
}
// findFireBrandLoftedHeight
double findFireBrandLoftedHeight(double t0, double z0, double zF, double Dp);
RcppExport SEXP _medfate_findFireBrandLoftedHeight(SEXP t0SEXP, SEXP z0SEXP, SEXP zFSEXP, SEXP DpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type t0(t0SEXP);
    Rcpp::traits::input_parameter< double >::type z0(z0SEXP);
    Rcpp::traits::input_parameter< double >::type zF(zFSEXP);
    Rcpp::traits::input_parameter< double >::type Dp(DpSEXP);
    rcpp_result_gen = Rcpp::wrap(findFireBrandLoftedHeight(t0, z0, zF, Dp));
    return rcpp_result_gen;
END_RCPP
}
// willBurnWhenHitFloor
bool willBurnWhenHitFloor(double zIni, double Dp);
RcppExport SEXP _medfate_willBurnWhenHitFloor(SEXP zIniSEXP, SEXP DpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type zIni(zIniSEXP);
    Rcpp::traits::input_parameter< double >::type Dp(DpSEXP);
    rcpp_result_gen = Rcpp::wrap(willBurnWhenHitFloor(zIni, Dp));
    return rcpp_result_gen;
END_RCPP
}
// fireBrandBurningTimeFromCanopyStructure
double fireBrandBurningTimeFromCanopyStructure(double LAIc);
RcppExport SEXP _medfate_fireBrandBurningTimeFromCanopyStructure(SEXP LAIcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type LAIc(LAIcSEXP);
    rcpp_result_gen = Rcpp::wrap(fireBrandBurningTimeFromCanopyStructure(LAIc));
    return rcpp_result_gen;
END_RCPP
}
// fireBrandFlameHeightFromCanopyStructure
double fireBrandFlameHeightFromCanopyStructure(double crownLength, double LAIc);
RcppExport SEXP _medfate_fireBrandFlameHeightFromCanopyStructure(SEXP crownLengthSEXP, SEXP LAIcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type crownLength(crownLengthSEXP);
    Rcpp::traits::input_parameter< double >::type LAIc(LAIcSEXP);
    rcpp_result_gen = Rcpp::wrap(fireBrandFlameHeightFromCanopyStructure(crownLength, LAIc));
    return rcpp_result_gen;
END_RCPP
}
// criticalFirelineIntensity
double criticalFirelineIntensity(double CBH, double M);
RcppExport SEXP _medfate_criticalFirelineIntensity(SEXP CBHSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type CBH(CBHSEXP);
    Rcpp::traits::input_parameter< double >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(criticalFirelineIntensity(CBH, M));
    return rcpp_result_gen;
END_RCPP
}
// cohortParameter
NumericVector cohortParameter(List x, DataFrame SpParams, String parName);
RcppExport SEXP _medfate_cohortParameter(SEXP xSEXP, SEXP SpParamsSEXP, SEXP parNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type SpParams(SpParamsSEXP);
    Rcpp::traits::input_parameter< String >::type parName(parNameSEXP);
    rcpp_result_gen = Rcpp::wrap(cohortParameter(x, SpParams, parName));
    return rcpp_result_gen;
END_RCPP
}
// cohortCharacterParameter
CharacterVector cohortCharacterParameter(List x, DataFrame SpParams, String parName);
RcppExport SEXP _medfate_cohortCharacterParameter(SEXP xSEXP, SEXP SpParamsSEXP, SEXP parNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type SpParams(SpParamsSEXP);
    Rcpp::traits::input_parameter< String >::type parName(parNameSEXP);
    rcpp_result_gen = Rcpp::wrap(cohortCharacterParameter(x, SpParams, parName));
    return rcpp_result_gen;
END_RCPP
}
// cohortSpecies
IntegerVector cohortSpecies(List x);
RcppExport SEXP _medfate_cohortSpecies(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cohortSpecies(x));
    return rcpp_result_gen;
END_RCPP
}
// cohortSpeciesName
CharacterVector cohortSpeciesName(List x, DataFrame SpParams);
RcppExport SEXP _medfate_cohortSpeciesName(SEXP xSEXP, SEXP SpParamsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type SpParams(SpParamsSEXP);
    rcpp_result_gen = Rcpp::wrap(cohortSpeciesName(x, SpParams));
    return rcpp_result_gen;
END_RCPP
}
// cohortIDs
CharacterVector cohortIDs(List x, DataFrame SpParams);
RcppExport SEXP _medfate_cohortIDs(SEXP xSEXP, SEXP SpParamsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type SpParams(SpParamsSEXP);
    rcpp_result_gen = Rcpp::wrap(cohortIDs(x, SpParams));
    return rcpp_result_gen;
END_RCPP
}
// treeBasalArea
NumericVector treeBasalArea(NumericVector N, NumericVector dbh);
RcppExport SEXP _medfate_treeBasalArea(SEXP NSEXP, SEXP dbhSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type N(NSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dbh(dbhSEXP);
    rcpp_result_gen = Rcpp::wrap(treeBasalArea(N, dbh));
    return rcpp_result_gen;
END_RCPP
}
// cohortBasalArea
NumericVector cohortBasalArea(List x);
RcppExport SEXP _medfate_cohortBasalArea(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cohortBasalArea(x));
    return rcpp_result_gen;
END_RCPP
}
// speciesBasalArea
NumericVector speciesBasalArea(List x, DataFrame SpParams);
RcppExport SEXP _medfate_speciesBasalArea(SEXP xSEXP, SEXP SpParamsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type SpParams(SpParamsSEXP);
    rcpp_result_gen = Rcpp::wrap(speciesBasalArea(x, SpParams));
    return rcpp_result_gen;
END_RCPP
}
// cohortLargerTreeBasalArea
NumericVector cohortLargerTreeBasalArea(List x);
RcppExport SEXP _medfate_cohortLargerTreeBasalArea(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cohortLargerTreeBasalArea(x));
    return rcpp_result_gen;
END_RCPP
}
// forestBasalArea
double forestBasalArea(List x);
RcppExport SEXP _medfate_forestBasalArea(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(forestBasalArea(x));
    return rcpp_result_gen;
END_RCPP
}
// cohortDensity
NumericVector cohortDensity(List x, DataFrame SpParams);
RcppExport SEXP _medfate_cohortDensity(SEXP xSEXP, SEXP SpParamsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type SpParams(SpParamsSEXP);
    rcpp_result_gen = Rcpp::wrap(cohortDensity(x, SpParams));
    return rcpp_result_gen;
END_RCPP
}
// cohortHeight
NumericVector cohortHeight(List x);
RcppExport SEXP _medfate_cohortHeight(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cohortHeight(x));
    return rcpp_result_gen;
END_RCPP
}
// shrubCrownRatio
NumericVector shrubCrownRatio(IntegerVector SP, DataFrame SpParams);
RcppExport SEXP _medfate_shrubCrownRatio(SEXP SPSEXP, SEXP SpParamsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type SP(SPSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type SpParams(SpParamsSEXP);
    rcpp_result_gen = Rcpp::wrap(shrubCrownRatio(SP, SpParams));
    return rcpp_result_gen;
END_RCPP
}
// cohortCrownRatio
NumericVector cohortCrownRatio(List x, DataFrame SpParams);
RcppExport SEXP _medfate_cohortCrownRatio(SEXP xSEXP, SEXP SpParamsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type SpParams(SpParamsSEXP);
    rcpp_result_gen = Rcpp::wrap(cohortCrownRatio(x, SpParams));
    return rcpp_result_gen;
END_RCPP
}
// cohortCrownBaseHeight
NumericVector cohortCrownBaseHeight(List x, DataFrame SpParams);
RcppExport SEXP _medfate_cohortCrownBaseHeight(SEXP xSEXP, SEXP SpParamsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type SpParams(SpParamsSEXP);
    rcpp_result_gen = Rcpp::wrap(cohortCrownBaseHeight(x, SpParams));
    return rcpp_result_gen;
END_RCPP
}
// cohortCrownLength
NumericVector cohortCrownLength(List x, DataFrame SpParams);
RcppExport SEXP _medfate_cohortCrownLength(SEXP xSEXP, SEXP SpParamsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type SpParams(SpParamsSEXP);
    rcpp_result_gen = Rcpp::wrap(cohortCrownLength(x, SpParams));
    return rcpp_result_gen;
END_RCPP
}
// treeFoliarBiomass
NumericVector treeFoliarBiomass(IntegerVector SP, NumericVector N, NumericVector dbh, DataFrame SpParams, double gdd);
RcppExport SEXP _medfate_treeFoliarBiomass(SEXP SPSEXP, SEXP NSEXP, SEXP dbhSEXP, SEXP SpParamsSEXP, SEXP gddSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type SP(SPSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type N(NSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dbh(dbhSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type SpParams(SpParamsSEXP);
    Rcpp::traits::input_parameter< double >::type gdd(gddSEXP);
    rcpp_result_gen = Rcpp::wrap(treeFoliarBiomass(SP, N, dbh, SpParams, gdd));
    return rcpp_result_gen;
END_RCPP
}
// shrubFoliarBiomass
NumericVector shrubFoliarBiomass(IntegerVector SP, NumericVector Cover, NumericVector H, NumericVector CR, DataFrame SpParams, double gdd);
RcppExport SEXP _medfate_shrubFoliarBiomass(SEXP SPSEXP, SEXP CoverSEXP, SEXP HSEXP, SEXP CRSEXP, SEXP SpParamsSEXP, SEXP gddSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type SP(SPSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Cover(CoverSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type H(HSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CR(CRSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type SpParams(SpParamsSEXP);
    Rcpp::traits::input_parameter< double >::type gdd(gddSEXP);
    rcpp_result_gen = Rcpp::wrap(shrubFoliarBiomass(SP, Cover, H, CR, SpParams, gdd));
    return rcpp_result_gen;
END_RCPP
}
// cohortFoliarBiomass
NumericVector cohortFoliarBiomass(List x, DataFrame SpParams, double gdd);
RcppExport SEXP _medfate_cohortFoliarBiomass(SEXP xSEXP, SEXP SpParamsSEXP, SEXP gddSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type SpParams(SpParamsSEXP);
    Rcpp::traits::input_parameter< double >::type gdd(gddSEXP);
    rcpp_result_gen = Rcpp::wrap(cohortFoliarBiomass(x, SpParams, gdd));
    return rcpp_result_gen;
END_RCPP
}
// shrubCover
double shrubCover(List x, double excludeMinHeight);
RcppExport SEXP _medfate_shrubCover(SEXP xSEXP, SEXP excludeMinHeightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type excludeMinHeight(excludeMinHeightSEXP);
    rcpp_result_gen = Rcpp::wrap(shrubCover(x, excludeMinHeight));
    return rcpp_result_gen;
END_RCPP
}
// cohortCover
NumericVector cohortCover(List x);
RcppExport SEXP _medfate_cohortCover(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cohortCover(x));
    return rcpp_result_gen;
END_RCPP
}
// shrubCrownPhytovolume
NumericVector shrubCrownPhytovolume(IntegerVector SP, NumericVector Cover, NumericVector H, NumericVector CR, DataFrame SpParams);
RcppExport SEXP _medfate_shrubCrownPhytovolume(SEXP SPSEXP, SEXP CoverSEXP, SEXP HSEXP, SEXP CRSEXP, SEXP SpParamsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type SP(SPSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Cover(CoverSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type H(HSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CR(CRSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type SpParams(SpParamsSEXP);
    rcpp_result_gen = Rcpp::wrap(shrubCrownPhytovolume(SP, Cover, H, CR, SpParams));
    return rcpp_result_gen;
END_RCPP
}
// cohortPhytovolume
NumericVector cohortPhytovolume(List x, DataFrame SpParams);
RcppExport SEXP _medfate_cohortPhytovolume(SEXP xSEXP, SEXP SpParamsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type SpParams(SpParamsSEXP);
    rcpp_result_gen = Rcpp::wrap(cohortPhytovolume(x, SpParams));
    return rcpp_result_gen;
END_RCPP
}
// treeFuel
NumericVector treeFuel(IntegerVector SP, NumericVector N, NumericVector dbh, DataFrame SpParams, double gdd, bool includeDead);
RcppExport SEXP _medfate_treeFuel(SEXP SPSEXP, SEXP NSEXP, SEXP dbhSEXP, SEXP SpParamsSEXP, SEXP gddSEXP, SEXP includeDeadSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type SP(SPSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type N(NSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dbh(dbhSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type SpParams(SpParamsSEXP);
    Rcpp::traits::input_parameter< double >::type gdd(gddSEXP);
    Rcpp::traits::input_parameter< bool >::type includeDead(includeDeadSEXP);
    rcpp_result_gen = Rcpp::wrap(treeFuel(SP, N, dbh, SpParams, gdd, includeDead));
    return rcpp_result_gen;
END_RCPP
}
// shrubFuel
NumericVector shrubFuel(IntegerVector SP, NumericVector Cover, NumericVector H, NumericVector CR, DataFrame SpParams, double gdd, bool includeDead);
RcppExport SEXP _medfate_shrubFuel(SEXP SPSEXP, SEXP CoverSEXP, SEXP HSEXP, SEXP CRSEXP, SEXP SpParamsSEXP, SEXP gddSEXP, SEXP includeDeadSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type SP(SPSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Cover(CoverSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type H(HSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CR(CRSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type SpParams(SpParamsSEXP);
    Rcpp::traits::input_parameter< double >::type gdd(gddSEXP);
    Rcpp::traits::input_parameter< bool >::type includeDead(includeDeadSEXP);
    rcpp_result_gen = Rcpp::wrap(shrubFuel(SP, Cover, H, CR, SpParams, gdd, includeDead));
    return rcpp_result_gen;
END_RCPP
}
// cohortFuel
NumericVector cohortFuel(List x, DataFrame SpParams, double gdd, bool includeDead);
RcppExport SEXP _medfate_cohortFuel(SEXP xSEXP, SEXP SpParamsSEXP, SEXP gddSEXP, SEXP includeDeadSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type SpParams(SpParamsSEXP);
    Rcpp::traits::input_parameter< double >::type gdd(gddSEXP);
    Rcpp::traits::input_parameter< bool >::type includeDead(includeDeadSEXP);
    rcpp_result_gen = Rcpp::wrap(cohortFuel(x, SpParams, gdd, includeDead));
    return rcpp_result_gen;
END_RCPP
}
// cohortEquilibriumLeafLitter
NumericVector cohortEquilibriumLeafLitter(List x, DataFrame SpParams, double AET);
RcppExport SEXP _medfate_cohortEquilibriumLeafLitter(SEXP xSEXP, SEXP SpParamsSEXP, SEXP AETSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type SpParams(SpParamsSEXP);
    Rcpp::traits::input_parameter< double >::type AET(AETSEXP);
    rcpp_result_gen = Rcpp::wrap(cohortEquilibriumLeafLitter(x, SpParams, AET));
    return rcpp_result_gen;
END_RCPP
}
// cohortEquilibriumSmallBranchLitter
NumericVector cohortEquilibriumSmallBranchLitter(List x, DataFrame SpParams, double smallBranchDecompositionRate);
RcppExport SEXP _medfate_cohortEquilibriumSmallBranchLitter(SEXP xSEXP, SEXP SpParamsSEXP, SEXP smallBranchDecompositionRateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type SpParams(SpParamsSEXP);
    Rcpp::traits::input_parameter< double >::type smallBranchDecompositionRate(smallBranchDecompositionRateSEXP);
    rcpp_result_gen = Rcpp::wrap(cohortEquilibriumSmallBranchLitter(x, SpParams, smallBranchDecompositionRate));
    return rcpp_result_gen;
END_RCPP
}
// treeLAI
NumericVector treeLAI(IntegerVector SP, NumericVector N, NumericVector dbh, DataFrame SpParams, double gdd);
RcppExport SEXP _medfate_treeLAI(SEXP SPSEXP, SEXP NSEXP, SEXP dbhSEXP, SEXP SpParamsSEXP, SEXP gddSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type SP(SPSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type N(NSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dbh(dbhSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type SpParams(SpParamsSEXP);
    Rcpp::traits::input_parameter< double >::type gdd(gddSEXP);
    rcpp_result_gen = Rcpp::wrap(treeLAI(SP, N, dbh, SpParams, gdd));
    return rcpp_result_gen;
END_RCPP
}
// shrubLAI
NumericVector shrubLAI(IntegerVector SP, NumericVector Cover, NumericVector H, DataFrame SpParams, double gdd);
RcppExport SEXP _medfate_shrubLAI(SEXP SPSEXP, SEXP CoverSEXP, SEXP HSEXP, SEXP SpParamsSEXP, SEXP gddSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type SP(SPSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Cover(CoverSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type H(HSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type SpParams(SpParamsSEXP);
    Rcpp::traits::input_parameter< double >::type gdd(gddSEXP);
    rcpp_result_gen = Rcpp::wrap(shrubLAI(SP, Cover, H, SpParams, gdd));
    return rcpp_result_gen;
END_RCPP
}
// cohortLAI
NumericVector cohortLAI(List x, DataFrame SpParams, double gdd);
RcppExport SEXP _medfate_cohortLAI(SEXP xSEXP, SEXP SpParamsSEXP, SEXP gddSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type SpParams(SpParamsSEXP);
    Rcpp::traits::input_parameter< double >::type gdd(gddSEXP);
    rcpp_result_gen = Rcpp::wrap(cohortLAI(x, SpParams, gdd));
    return rcpp_result_gen;
END_RCPP
}
// LAIdistribution
NumericMatrix LAIdistribution(NumericVector z, List x, DataFrame SpParams, double gdd);
RcppExport SEXP _medfate_LAIdistribution(SEXP zSEXP, SEXP xSEXP, SEXP SpParamsSEXP, SEXP gddSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type z(zSEXP);
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type SpParams(SpParamsSEXP);
    Rcpp::traits::input_parameter< double >::type gdd(gddSEXP);
    rcpp_result_gen = Rcpp::wrap(LAIdistribution(z, x, SpParams, gdd));
    return rcpp_result_gen;
END_RCPP
}
// LAIprofile
NumericVector LAIprofile(NumericVector z, List x, DataFrame SpParams, double gdd);
RcppExport SEXP _medfate_LAIprofile(SEXP zSEXP, SEXP xSEXP, SEXP SpParamsSEXP, SEXP gddSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type z(zSEXP);
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type SpParams(SpParamsSEXP);
    Rcpp::traits::input_parameter< double >::type gdd(gddSEXP);
    rcpp_result_gen = Rcpp::wrap(LAIprofile(z, x, SpParams, gdd));
    return rcpp_result_gen;
END_RCPP
}
// forest2aboveground
DataFrame forest2aboveground(List x, DataFrame SpParams, double gdd);
RcppExport SEXP _medfate_forest2aboveground(SEXP xSEXP, SEXP SpParamsSEXP, SEXP gddSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type SpParams(SpParamsSEXP);
    Rcpp::traits::input_parameter< double >::type gdd(gddSEXP);
    rcpp_result_gen = Rcpp::wrap(forest2aboveground(x, SpParams, gdd));
    return rcpp_result_gen;
END_RCPP
}
// fuelConditions
NumericVector fuelConditions(double airTemp, double airHumidity, double fuelRadiation, double fuelWindSpeed);
RcppExport SEXP _medfate_fuelConditions(SEXP airTempSEXP, SEXP airHumiditySEXP, SEXP fuelRadiationSEXP, SEXP fuelWindSpeedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type airTemp(airTempSEXP);
    Rcpp::traits::input_parameter< double >::type airHumidity(airHumiditySEXP);
    Rcpp::traits::input_parameter< double >::type fuelRadiation(fuelRadiationSEXP);
    Rcpp::traits::input_parameter< double >::type fuelWindSpeed(fuelWindSpeedSEXP);
    rcpp_result_gen = Rcpp::wrap(fuelConditions(airTemp, airHumidity, fuelRadiation, fuelWindSpeed));
    return rcpp_result_gen;
END_RCPP
}
// EMCdesorption
double EMCdesorption(double fuelTemperature, double fuelHumidity);
RcppExport SEXP _medfate_EMCdesorption(SEXP fuelTemperatureSEXP, SEXP fuelHumiditySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type fuelTemperature(fuelTemperatureSEXP);
    Rcpp::traits::input_parameter< double >::type fuelHumidity(fuelHumiditySEXP);
    rcpp_result_gen = Rcpp::wrap(EMCdesorption(fuelTemperature, fuelHumidity));
    return rcpp_result_gen;
END_RCPP
}
// EMCadsorption
double EMCadsorption(double fuelTemperature, double fuelHumidity);
RcppExport SEXP _medfate_EMCadsorption(SEXP fuelTemperatureSEXP, SEXP fuelHumiditySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type fuelTemperature(fuelTemperatureSEXP);
    Rcpp::traits::input_parameter< double >::type fuelHumidity(fuelHumiditySEXP);
    rcpp_result_gen = Rcpp::wrap(EMCadsorption(fuelTemperature, fuelHumidity));
    return rcpp_result_gen;
END_RCPP
}
// EMCSimard
double EMCSimard(double fuelTemperature, double fuelHumidity);
RcppExport SEXP _medfate_EMCSimard(SEXP fuelTemperatureSEXP, SEXP fuelHumiditySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type fuelTemperature(fuelTemperatureSEXP);
    Rcpp::traits::input_parameter< double >::type fuelHumidity(fuelHumiditySEXP);
    rcpp_result_gen = Rcpp::wrap(EMCSimard(fuelTemperature, fuelHumidity));
    return rcpp_result_gen;
END_RCPP
}
// woodyFuelProfile
NumericVector woodyFuelProfile(NumericVector z, List x, DataFrame SpParams, double gdd);
RcppExport SEXP _medfate_woodyFuelProfile(SEXP zSEXP, SEXP xSEXP, SEXP SpParamsSEXP, SEXP gddSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type z(zSEXP);
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type SpParams(SpParamsSEXP);
    Rcpp::traits::input_parameter< double >::type gdd(gddSEXP);
    rcpp_result_gen = Rcpp::wrap(woodyFuelProfile(z, x, SpParams, gdd));
    return rcpp_result_gen;
END_RCPP
}
// layerCohortFuelLoading
NumericVector layerCohortFuelLoading(double minHeight, double maxHeight, NumericVector cohortLoading, NumericVector H, NumericVector CR);
RcppExport SEXP _medfate_layerCohortFuelLoading(SEXP minHeightSEXP, SEXP maxHeightSEXP, SEXP cohortLoadingSEXP, SEXP HSEXP, SEXP CRSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type minHeight(minHeightSEXP);
    Rcpp::traits::input_parameter< double >::type maxHeight(maxHeightSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cohortLoading(cohortLoadingSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type H(HSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CR(CRSEXP);
    rcpp_result_gen = Rcpp::wrap(layerCohortFuelLoading(minHeight, maxHeight, cohortLoading, H, CR));
    return rcpp_result_gen;
END_RCPP
}
// layerFuelLoading
double layerFuelLoading(double minHeight, double maxHeight, NumericVector cohortLoading, NumericVector H, NumericVector CR);
RcppExport SEXP _medfate_layerFuelLoading(SEXP minHeightSEXP, SEXP maxHeightSEXP, SEXP cohortLoadingSEXP, SEXP HSEXP, SEXP CRSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type minHeight(minHeightSEXP);
    Rcpp::traits::input_parameter< double >::type maxHeight(maxHeightSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cohortLoading(cohortLoadingSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type H(HSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CR(CRSEXP);
    rcpp_result_gen = Rcpp::wrap(layerFuelLoading(minHeight, maxHeight, cohortLoading, H, CR));
    return rcpp_result_gen;
END_RCPP
}
// layerLAI
double layerLAI(double minHeight, double maxHeight, NumericVector cohortLAI, NumericVector H, NumericVector CR);
RcppExport SEXP _medfate_layerLAI(SEXP minHeightSEXP, SEXP maxHeightSEXP, SEXP cohortLAISEXP, SEXP HSEXP, SEXP CRSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type minHeight(minHeightSEXP);
    Rcpp::traits::input_parameter< double >::type maxHeight(maxHeightSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cohortLAI(cohortLAISEXP);
    Rcpp::traits::input_parameter< NumericVector >::type H(HSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CR(CRSEXP);
    rcpp_result_gen = Rcpp::wrap(layerLAI(minHeight, maxHeight, cohortLAI, H, CR));
    return rcpp_result_gen;
END_RCPP
}
// layerFuelAverageSpeciesParameter
double layerFuelAverageSpeciesParameter(String spParName, double minHeight, double maxHeight, List x, DataFrame SpParams, double gdd);
RcppExport SEXP _medfate_layerFuelAverageSpeciesParameter(SEXP spParNameSEXP, SEXP minHeightSEXP, SEXP maxHeightSEXP, SEXP xSEXP, SEXP SpParamsSEXP, SEXP gddSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< String >::type spParName(spParNameSEXP);
    Rcpp::traits::input_parameter< double >::type minHeight(minHeightSEXP);
    Rcpp::traits::input_parameter< double >::type maxHeight(maxHeightSEXP);
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type SpParams(SpParamsSEXP);
    Rcpp::traits::input_parameter< double >::type gdd(gddSEXP);
    rcpp_result_gen = Rcpp::wrap(layerFuelAverageSpeciesParameter(spParName, minHeight, maxHeight, x, SpParams, gdd));
    return rcpp_result_gen;
END_RCPP
}
// layerFuelAverageParameter
double layerFuelAverageParameter(double minHeight, double maxHeight, NumericVector cohortParameter, NumericVector cohortLoading, NumericVector H, NumericVector CR);
RcppExport SEXP _medfate_layerFuelAverageParameter(SEXP minHeightSEXP, SEXP maxHeightSEXP, SEXP cohortParameterSEXP, SEXP cohortLoadingSEXP, SEXP HSEXP, SEXP CRSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type minHeight(minHeightSEXP);
    Rcpp::traits::input_parameter< double >::type maxHeight(maxHeightSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cohortParameter(cohortParameterSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cohortLoading(cohortLoadingSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type H(HSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CR(CRSEXP);
    rcpp_result_gen = Rcpp::wrap(layerFuelAverageParameter(minHeight, maxHeight, cohortParameter, cohortLoading, H, CR));
    return rcpp_result_gen;
END_RCPP
}
// layerFuelAverageCrownLength
double layerFuelAverageCrownLength(double minHeight, double maxHeight, NumericVector cohortCrownLength, NumericVector cohortLoading, NumericVector H, NumericVector CR);
RcppExport SEXP _medfate_layerFuelAverageCrownLength(SEXP minHeightSEXP, SEXP maxHeightSEXP, SEXP cohortCrownLengthSEXP, SEXP cohortLoadingSEXP, SEXP HSEXP, SEXP CRSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type minHeight(minHeightSEXP);
    Rcpp::traits::input_parameter< double >::type maxHeight(maxHeightSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cohortCrownLength(cohortCrownLengthSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cohortLoading(cohortLoadingSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type H(HSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CR(CRSEXP);
    rcpp_result_gen = Rcpp::wrap(layerFuelAverageCrownLength(minHeight, maxHeight, cohortCrownLength, cohortLoading, H, CR));
    return rcpp_result_gen;
END_RCPP
}
// fuelLiveStratification
List fuelLiveStratification(List object, DataFrame SpParams, double gdd, double heightProfileStep, double maxHeightProfile, double bulkDensityThreshold);
RcppExport SEXP _medfate_fuelLiveStratification(SEXP objectSEXP, SEXP SpParamsSEXP, SEXP gddSEXP, SEXP heightProfileStepSEXP, SEXP maxHeightProfileSEXP, SEXP bulkDensityThresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type object(objectSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type SpParams(SpParamsSEXP);
    Rcpp::traits::input_parameter< double >::type gdd(gddSEXP);
    Rcpp::traits::input_parameter< double >::type heightProfileStep(heightProfileStepSEXP);
    Rcpp::traits::input_parameter< double >::type maxHeightProfile(maxHeightProfileSEXP);
    Rcpp::traits::input_parameter< double >::type bulkDensityThreshold(bulkDensityThresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(fuelLiveStratification(object, SpParams, gdd, heightProfileStep, maxHeightProfile, bulkDensityThreshold));
    return rcpp_result_gen;
END_RCPP
}
// FCCSproperties
DataFrame FCCSproperties(List object, double ShrubCover, double CanopyCover, DataFrame SpParams, double gdd, double heightProfileStep, double maxHeightProfile, double bulkDensityThreshold);
RcppExport SEXP _medfate_FCCSproperties(SEXP objectSEXP, SEXP ShrubCoverSEXP, SEXP CanopyCoverSEXP, SEXP SpParamsSEXP, SEXP gddSEXP, SEXP heightProfileStepSEXP, SEXP maxHeightProfileSEXP, SEXP bulkDensityThresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type object(objectSEXP);
    Rcpp::traits::input_parameter< double >::type ShrubCover(ShrubCoverSEXP);
    Rcpp::traits::input_parameter< double >::type CanopyCover(CanopyCoverSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type SpParams(SpParamsSEXP);
    Rcpp::traits::input_parameter< double >::type gdd(gddSEXP);
    Rcpp::traits::input_parameter< double >::type heightProfileStep(heightProfileStepSEXP);
    Rcpp::traits::input_parameter< double >::type maxHeightProfile(maxHeightProfileSEXP);
    Rcpp::traits::input_parameter< double >::type bulkDensityThreshold(bulkDensityThresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(FCCSproperties(object, ShrubCover, CanopyCover, SpParams, gdd, heightProfileStep, maxHeightProfile, bulkDensityThreshold));
    return rcpp_result_gen;
END_RCPP
}
// defoliationFraction
double defoliationFraction(double conc, double threshold);
RcppExport SEXP _medfate_defoliationFraction(SEXP concSEXP, SEXP thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type conc(concSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(defoliationFraction(conc, threshold));
    return rcpp_result_gen;
END_RCPP
}
// growth
List growth(List x, List soil, DataFrame meteo, double latitude, double elevation, double slope, double aspect);
RcppExport SEXP _medfate_growth(SEXP xSEXP, SEXP soilSEXP, SEXP meteoSEXP, SEXP latitudeSEXP, SEXP elevationSEXP, SEXP slopeSEXP, SEXP aspectSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< List >::type soil(soilSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type meteo(meteoSEXP);
    Rcpp::traits::input_parameter< double >::type latitude(latitudeSEXP);
    Rcpp::traits::input_parameter< double >::type elevation(elevationSEXP);
    Rcpp::traits::input_parameter< double >::type slope(slopeSEXP);
    Rcpp::traits::input_parameter< double >::type aspect(aspectSEXP);
    rcpp_result_gen = Rcpp::wrap(growth(x, soil, meteo, latitude, elevation, slope, aspect));
    return rcpp_result_gen;
END_RCPP
}
// Psi2K
double Psi2K(double psi, double Psi_extract, double ws);
RcppExport SEXP _medfate_Psi2K(SEXP psiSEXP, SEXP Psi_extractSEXP, SEXP wsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< double >::type Psi_extract(Psi_extractSEXP);
    Rcpp::traits::input_parameter< double >::type ws(wsSEXP);
    rcpp_result_gen = Rcpp::wrap(Psi2K(psi, Psi_extract, ws));
    return rcpp_result_gen;
END_RCPP
}
// K2Psi
double K2Psi(double K, double Psi_extract, double ws);
RcppExport SEXP _medfate_K2Psi(SEXP KSEXP, SEXP Psi_extractSEXP, SEXP wsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type Psi_extract(Psi_extractSEXP);
    Rcpp::traits::input_parameter< double >::type ws(wsSEXP);
    rcpp_result_gen = Rcpp::wrap(K2Psi(K, Psi_extract, ws));
    return rcpp_result_gen;
END_RCPP
}
// averagePsi
double averagePsi(NumericVector psi, NumericVector v, double c, double d);
RcppExport SEXP _medfate_averagePsi(SEXP psiSEXP, SEXP vSEXP, SEXP cSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(averagePsi(psi, v, c, d));
    return rcpp_result_gen;
END_RCPP
}
// gammds
double gammds(double x, double p);
RcppExport SEXP _medfate_gammds(SEXP xSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(gammds(x, p));
    return rcpp_result_gen;
END_RCPP
}
// xylemConductance
double xylemConductance(double psi, double kxylemmax, double c, double d);
RcppExport SEXP _medfate_xylemConductance(SEXP psiSEXP, SEXP kxylemmaxSEXP, SEXP cSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< double >::type kxylemmax(kxylemmaxSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(xylemConductance(psi, kxylemmax, c, d));
    return rcpp_result_gen;
END_RCPP
}
// xylemPsi
double xylemPsi(double kxylem, double kxylemmax, double c, double d);
RcppExport SEXP _medfate_xylemPsi(SEXP kxylemSEXP, SEXP kxylemmaxSEXP, SEXP cSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type kxylem(kxylemSEXP);
    Rcpp::traits::input_parameter< double >::type kxylemmax(kxylemmaxSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(xylemPsi(kxylem, kxylemmax, c, d));
    return rcpp_result_gen;
END_RCPP
}
// Egamma
double Egamma(double psi, double kxylemmax, double c, double d, double psiCav);
RcppExport SEXP _medfate_Egamma(SEXP psiSEXP, SEXP kxylemmaxSEXP, SEXP cSEXP, SEXP dSEXP, SEXP psiCavSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< double >::type kxylemmax(kxylemmaxSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type psiCav(psiCavSEXP);
    rcpp_result_gen = Rcpp::wrap(Egamma(psi, kxylemmax, c, d, psiCav));
    return rcpp_result_gen;
END_RCPP
}
// EXylem
double EXylem(double psiPlant, double psiUpstream, double kxylemmax, double c, double d, bool allowNegativeFlux, double psiCav);
RcppExport SEXP _medfate_EXylem(SEXP psiPlantSEXP, SEXP psiUpstreamSEXP, SEXP kxylemmaxSEXP, SEXP cSEXP, SEXP dSEXP, SEXP allowNegativeFluxSEXP, SEXP psiCavSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type psiPlant(psiPlantSEXP);
    Rcpp::traits::input_parameter< double >::type psiUpstream(psiUpstreamSEXP);
    Rcpp::traits::input_parameter< double >::type kxylemmax(kxylemmaxSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< bool >::type allowNegativeFlux(allowNegativeFluxSEXP);
    Rcpp::traits::input_parameter< double >::type psiCav(psiCavSEXP);
    rcpp_result_gen = Rcpp::wrap(EXylem(psiPlant, psiUpstream, kxylemmax, c, d, allowNegativeFlux, psiCav));
    return rcpp_result_gen;
END_RCPP
}
// psiCrit
double psiCrit(double c, double d);
RcppExport SEXP _medfate_psiCrit(SEXP cSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(psiCrit(c, d));
    return rcpp_result_gen;
END_RCPP
}
// E2psiXylem
double E2psiXylem(double E, double psiUpstream, double kxylemmax, double c, double d, double psiCav, double psiStep, double psiMax);
RcppExport SEXP _medfate_E2psiXylem(SEXP ESEXP, SEXP psiUpstreamSEXP, SEXP kxylemmaxSEXP, SEXP cSEXP, SEXP dSEXP, SEXP psiCavSEXP, SEXP psiStepSEXP, SEXP psiMaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type E(ESEXP);
    Rcpp::traits::input_parameter< double >::type psiUpstream(psiUpstreamSEXP);
    Rcpp::traits::input_parameter< double >::type kxylemmax(kxylemmaxSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type psiCav(psiCavSEXP);
    Rcpp::traits::input_parameter< double >::type psiStep(psiStepSEXP);
    Rcpp::traits::input_parameter< double >::type psiMax(psiMaxSEXP);
    rcpp_result_gen = Rcpp::wrap(E2psiXylem(E, psiUpstream, kxylemmax, c, d, psiCav, psiStep, psiMax));
    return rcpp_result_gen;
END_RCPP
}
// Ecrit
double Ecrit(double psiUpstream, double kxylemmax, double c, double d);
RcppExport SEXP _medfate_Ecrit(SEXP psiUpstreamSEXP, SEXP kxylemmaxSEXP, SEXP cSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type psiUpstream(psiUpstreamSEXP);
    Rcpp::traits::input_parameter< double >::type kxylemmax(kxylemmaxSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(Ecrit(psiUpstream, kxylemmax, c, d));
    return rcpp_result_gen;
END_RCPP
}
// regulatedPsiXylem
NumericVector regulatedPsiXylem(double E, double psiUpstream, double kxylemmax, double c, double d, double psiStep);
RcppExport SEXP _medfate_regulatedPsiXylem(SEXP ESEXP, SEXP psiUpstreamSEXP, SEXP kxylemmaxSEXP, SEXP cSEXP, SEXP dSEXP, SEXP psiStepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type E(ESEXP);
    Rcpp::traits::input_parameter< double >::type psiUpstream(psiUpstreamSEXP);
    Rcpp::traits::input_parameter< double >::type kxylemmax(kxylemmaxSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type psiStep(psiStepSEXP);
    rcpp_result_gen = Rcpp::wrap(regulatedPsiXylem(E, psiUpstream, kxylemmax, c, d, psiStep));
    return rcpp_result_gen;
END_RCPP
}
// supplyFunctionOneXylem
List supplyFunctionOneXylem(NumericVector psiSoil, NumericVector v, double kstemmax, double stemc, double stemd, double psiCav, int maxNsteps, double psiStep, double psiMax, double dE);
RcppExport SEXP _medfate_supplyFunctionOneXylem(SEXP psiSoilSEXP, SEXP vSEXP, SEXP kstemmaxSEXP, SEXP stemcSEXP, SEXP stemdSEXP, SEXP psiCavSEXP, SEXP maxNstepsSEXP, SEXP psiStepSEXP, SEXP psiMaxSEXP, SEXP dESEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type psiSoil(psiSoilSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< double >::type kstemmax(kstemmaxSEXP);
    Rcpp::traits::input_parameter< double >::type stemc(stemcSEXP);
    Rcpp::traits::input_parameter< double >::type stemd(stemdSEXP);
    Rcpp::traits::input_parameter< double >::type psiCav(psiCavSEXP);
    Rcpp::traits::input_parameter< int >::type maxNsteps(maxNstepsSEXP);
    Rcpp::traits::input_parameter< double >::type psiStep(psiStepSEXP);
    Rcpp::traits::input_parameter< double >::type psiMax(psiMaxSEXP);
    Rcpp::traits::input_parameter< double >::type dE(dESEXP);
    rcpp_result_gen = Rcpp::wrap(supplyFunctionOneXylem(psiSoil, v, kstemmax, stemc, stemd, psiCav, maxNsteps, psiStep, psiMax, dE));
    return rcpp_result_gen;
END_RCPP
}
// vanGenuchtenConductance
double vanGenuchtenConductance(double psi, double krhizomax, double n, double alpha);
RcppExport SEXP _medfate_vanGenuchtenConductance(SEXP psiSEXP, SEXP krhizomaxSEXP, SEXP nSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< double >::type krhizomax(krhizomaxSEXP);
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(vanGenuchtenConductance(psi, krhizomax, n, alpha));
    return rcpp_result_gen;
END_RCPP
}
// E2psiVanGenuchten
double E2psiVanGenuchten(double E, double psiSoil, double krhizomax, double n, double alpha, double psiStep, double psiMax);
RcppExport SEXP _medfate_E2psiVanGenuchten(SEXP ESEXP, SEXP psiSoilSEXP, SEXP krhizomaxSEXP, SEXP nSEXP, SEXP alphaSEXP, SEXP psiStepSEXP, SEXP psiMaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type E(ESEXP);
    Rcpp::traits::input_parameter< double >::type psiSoil(psiSoilSEXP);
    Rcpp::traits::input_parameter< double >::type krhizomax(krhizomaxSEXP);
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type psiStep(psiStepSEXP);
    Rcpp::traits::input_parameter< double >::type psiMax(psiMaxSEXP);
    rcpp_result_gen = Rcpp::wrap(E2psiVanGenuchten(E, psiSoil, krhizomax, n, alpha, psiStep, psiMax));
    return rcpp_result_gen;
END_RCPP
}
// EVanGenuchten
double EVanGenuchten(double psiRhizo, double psiSoil, double krhizomax, double n, double alpha, double psiStep, double psiTol, bool allowNegativeFlux);
RcppExport SEXP _medfate_EVanGenuchten(SEXP psiRhizoSEXP, SEXP psiSoilSEXP, SEXP krhizomaxSEXP, SEXP nSEXP, SEXP alphaSEXP, SEXP psiStepSEXP, SEXP psiTolSEXP, SEXP allowNegativeFluxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type psiRhizo(psiRhizoSEXP);
    Rcpp::traits::input_parameter< double >::type psiSoil(psiSoilSEXP);
    Rcpp::traits::input_parameter< double >::type krhizomax(krhizomaxSEXP);
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type psiStep(psiStepSEXP);
    Rcpp::traits::input_parameter< double >::type psiTol(psiTolSEXP);
    Rcpp::traits::input_parameter< bool >::type allowNegativeFlux(allowNegativeFluxSEXP);
    rcpp_result_gen = Rcpp::wrap(EVanGenuchten(psiRhizo, psiSoil, krhizomax, n, alpha, psiStep, psiTol, allowNegativeFlux));
    return rcpp_result_gen;
END_RCPP
}
// E2psiTwoElements
double E2psiTwoElements(double E, double psiSoil, double krhizomax, double kxylemmax, double n, double alpha, double c, double d, double psiCav, double psiStep, double psiMax);
RcppExport SEXP _medfate_E2psiTwoElements(SEXP ESEXP, SEXP psiSoilSEXP, SEXP krhizomaxSEXP, SEXP kxylemmaxSEXP, SEXP nSEXP, SEXP alphaSEXP, SEXP cSEXP, SEXP dSEXP, SEXP psiCavSEXP, SEXP psiStepSEXP, SEXP psiMaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type E(ESEXP);
    Rcpp::traits::input_parameter< double >::type psiSoil(psiSoilSEXP);
    Rcpp::traits::input_parameter< double >::type krhizomax(krhizomaxSEXP);
    Rcpp::traits::input_parameter< double >::type kxylemmax(kxylemmaxSEXP);
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type psiCav(psiCavSEXP);
    Rcpp::traits::input_parameter< double >::type psiStep(psiStepSEXP);
    Rcpp::traits::input_parameter< double >::type psiMax(psiMaxSEXP);
    rcpp_result_gen = Rcpp::wrap(E2psiTwoElements(E, psiSoil, krhizomax, kxylemmax, n, alpha, c, d, psiCav, psiStep, psiMax));
    return rcpp_result_gen;
END_RCPP
}
// supplyFunctionTwoElements
List supplyFunctionTwoElements(double Emax, double psiSoil, double krhizomax, double kxylemmax, double n, double alpha, double c, double d, double psiCav, double dE, double psiMax);
RcppExport SEXP _medfate_supplyFunctionTwoElements(SEXP EmaxSEXP, SEXP psiSoilSEXP, SEXP krhizomaxSEXP, SEXP kxylemmaxSEXP, SEXP nSEXP, SEXP alphaSEXP, SEXP cSEXP, SEXP dSEXP, SEXP psiCavSEXP, SEXP dESEXP, SEXP psiMaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type Emax(EmaxSEXP);
    Rcpp::traits::input_parameter< double >::type psiSoil(psiSoilSEXP);
    Rcpp::traits::input_parameter< double >::type krhizomax(krhizomaxSEXP);
    Rcpp::traits::input_parameter< double >::type kxylemmax(kxylemmaxSEXP);
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type psiCav(psiCavSEXP);
    Rcpp::traits::input_parameter< double >::type dE(dESEXP);
    Rcpp::traits::input_parameter< double >::type psiMax(psiMaxSEXP);
    rcpp_result_gen = Rcpp::wrap(supplyFunctionTwoElements(Emax, psiSoil, krhizomax, kxylemmax, n, alpha, c, d, psiCav, dE, psiMax));
    return rcpp_result_gen;
END_RCPP
}
// regulatedPsiTwoElements
NumericVector regulatedPsiTwoElements(double Emax, double psiSoil, double krhizomax, double kxylemmax, double n, double alpha, double c, double d, double dE, double psiMax);
RcppExport SEXP _medfate_regulatedPsiTwoElements(SEXP EmaxSEXP, SEXP psiSoilSEXP, SEXP krhizomaxSEXP, SEXP kxylemmaxSEXP, SEXP nSEXP, SEXP alphaSEXP, SEXP cSEXP, SEXP dSEXP, SEXP dESEXP, SEXP psiMaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type Emax(EmaxSEXP);
    Rcpp::traits::input_parameter< double >::type psiSoil(psiSoilSEXP);
    Rcpp::traits::input_parameter< double >::type krhizomax(krhizomaxSEXP);
    Rcpp::traits::input_parameter< double >::type kxylemmax(kxylemmaxSEXP);
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type dE(dESEXP);
    Rcpp::traits::input_parameter< double >::type psiMax(psiMaxSEXP);
    rcpp_result_gen = Rcpp::wrap(regulatedPsiTwoElements(Emax, psiSoil, krhizomax, kxylemmax, n, alpha, c, d, dE, psiMax));
    return rcpp_result_gen;
END_RCPP
}
// E2psiNetwork
List E2psiNetwork(double E, NumericVector psiSoil, NumericVector krhizomax, NumericVector nsoil, NumericVector alphasoil, NumericVector krootmax, double rootc, double rootd, double kstemmax, double stemc, double stemd, NumericVector psiIni, double psiCav, double psiStep, double psiMax, int ntrial, double psiTol, double ETol);
RcppExport SEXP _medfate_E2psiNetwork(SEXP ESEXP, SEXP psiSoilSEXP, SEXP krhizomaxSEXP, SEXP nsoilSEXP, SEXP alphasoilSEXP, SEXP krootmaxSEXP, SEXP rootcSEXP, SEXP rootdSEXP, SEXP kstemmaxSEXP, SEXP stemcSEXP, SEXP stemdSEXP, SEXP psiIniSEXP, SEXP psiCavSEXP, SEXP psiStepSEXP, SEXP psiMaxSEXP, SEXP ntrialSEXP, SEXP psiTolSEXP, SEXP ETolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type E(ESEXP);
    Rcpp::traits::input_parameter< NumericVector >::type psiSoil(psiSoilSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type krhizomax(krhizomaxSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nsoil(nsoilSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alphasoil(alphasoilSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type krootmax(krootmaxSEXP);
    Rcpp::traits::input_parameter< double >::type rootc(rootcSEXP);
    Rcpp::traits::input_parameter< double >::type rootd(rootdSEXP);
    Rcpp::traits::input_parameter< double >::type kstemmax(kstemmaxSEXP);
    Rcpp::traits::input_parameter< double >::type stemc(stemcSEXP);
    Rcpp::traits::input_parameter< double >::type stemd(stemdSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type psiIni(psiIniSEXP);
    Rcpp::traits::input_parameter< double >::type psiCav(psiCavSEXP);
    Rcpp::traits::input_parameter< double >::type psiStep(psiStepSEXP);
    Rcpp::traits::input_parameter< double >::type psiMax(psiMaxSEXP);
    Rcpp::traits::input_parameter< int >::type ntrial(ntrialSEXP);
    Rcpp::traits::input_parameter< double >::type psiTol(psiTolSEXP);
    Rcpp::traits::input_parameter< double >::type ETol(ETolSEXP);
    rcpp_result_gen = Rcpp::wrap(E2psiNetwork(E, psiSoil, krhizomax, nsoil, alphasoil, krootmax, rootc, rootd, kstemmax, stemc, stemd, psiIni, psiCav, psiStep, psiMax, ntrial, psiTol, ETol));
    return rcpp_result_gen;
END_RCPP
}
// averageRhizosphereResistancePercent
double averageRhizosphereResistancePercent(double krhizomax, double n, double alpha, double krootmax, double rootc, double rootd, double kstemmax, double stemc, double stemd, double psiStep);
RcppExport SEXP _medfate_averageRhizosphereResistancePercent(SEXP krhizomaxSEXP, SEXP nSEXP, SEXP alphaSEXP, SEXP krootmaxSEXP, SEXP rootcSEXP, SEXP rootdSEXP, SEXP kstemmaxSEXP, SEXP stemcSEXP, SEXP stemdSEXP, SEXP psiStepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type krhizomax(krhizomaxSEXP);
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type krootmax(krootmaxSEXP);
    Rcpp::traits::input_parameter< double >::type rootc(rootcSEXP);
    Rcpp::traits::input_parameter< double >::type rootd(rootdSEXP);
    Rcpp::traits::input_parameter< double >::type kstemmax(kstemmaxSEXP);
    Rcpp::traits::input_parameter< double >::type stemc(stemcSEXP);
    Rcpp::traits::input_parameter< double >::type stemd(stemdSEXP);
    Rcpp::traits::input_parameter< double >::type psiStep(psiStepSEXP);
    rcpp_result_gen = Rcpp::wrap(averageRhizosphereResistancePercent(krhizomax, n, alpha, krootmax, rootc, rootd, kstemmax, stemc, stemd, psiStep));
    return rcpp_result_gen;
END_RCPP
}
// findRhizosphereMaximumConductance
double findRhizosphereMaximumConductance(double averageResistancePercent, double n, double alpha, double krootmax, double rootc, double rootd, double kstemmax, double stemc, double stemd);
RcppExport SEXP _medfate_findRhizosphereMaximumConductance(SEXP averageResistancePercentSEXP, SEXP nSEXP, SEXP alphaSEXP, SEXP krootmaxSEXP, SEXP rootcSEXP, SEXP rootdSEXP, SEXP kstemmaxSEXP, SEXP stemcSEXP, SEXP stemdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type averageResistancePercent(averageResistancePercentSEXP);
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type krootmax(krootmaxSEXP);
    Rcpp::traits::input_parameter< double >::type rootc(rootcSEXP);
    Rcpp::traits::input_parameter< double >::type rootd(rootdSEXP);
    Rcpp::traits::input_parameter< double >::type kstemmax(kstemmaxSEXP);
    Rcpp::traits::input_parameter< double >::type stemc(stemcSEXP);
    Rcpp::traits::input_parameter< double >::type stemd(stemdSEXP);
    rcpp_result_gen = Rcpp::wrap(findRhizosphereMaximumConductance(averageResistancePercent, n, alpha, krootmax, rootc, rootd, kstemmax, stemc, stemd));
    return rcpp_result_gen;
END_RCPP
}
// supplyFunctionNetwork
List supplyFunctionNetwork(NumericVector psiSoil, NumericVector krhizomax, NumericVector nsoil, NumericVector alphasoil, NumericVector krootmax, double rootc, double rootd, double kstemmax, double stemc, double stemd, double psiCav, int maxNsteps, double psiStep, double psiMax, int ntrial, double psiTol, double ETol);
RcppExport SEXP _medfate_supplyFunctionNetwork(SEXP psiSoilSEXP, SEXP krhizomaxSEXP, SEXP nsoilSEXP, SEXP alphasoilSEXP, SEXP krootmaxSEXP, SEXP rootcSEXP, SEXP rootdSEXP, SEXP kstemmaxSEXP, SEXP stemcSEXP, SEXP stemdSEXP, SEXP psiCavSEXP, SEXP maxNstepsSEXP, SEXP psiStepSEXP, SEXP psiMaxSEXP, SEXP ntrialSEXP, SEXP psiTolSEXP, SEXP ETolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type psiSoil(psiSoilSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type krhizomax(krhizomaxSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nsoil(nsoilSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alphasoil(alphasoilSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type krootmax(krootmaxSEXP);
    Rcpp::traits::input_parameter< double >::type rootc(rootcSEXP);
    Rcpp::traits::input_parameter< double >::type rootd(rootdSEXP);
    Rcpp::traits::input_parameter< double >::type kstemmax(kstemmaxSEXP);
    Rcpp::traits::input_parameter< double >::type stemc(stemcSEXP);
    Rcpp::traits::input_parameter< double >::type stemd(stemdSEXP);
    Rcpp::traits::input_parameter< double >::type psiCav(psiCavSEXP);
    Rcpp::traits::input_parameter< int >::type maxNsteps(maxNstepsSEXP);
    Rcpp::traits::input_parameter< double >::type psiStep(psiStepSEXP);
    Rcpp::traits::input_parameter< double >::type psiMax(psiMaxSEXP);
    Rcpp::traits::input_parameter< int >::type ntrial(ntrialSEXP);
    Rcpp::traits::input_parameter< double >::type psiTol(psiTolSEXP);
    Rcpp::traits::input_parameter< double >::type ETol(ETolSEXP);
    rcpp_result_gen = Rcpp::wrap(supplyFunctionNetwork(psiSoil, krhizomax, nsoil, alphasoil, krootmax, rootc, rootd, kstemmax, stemc, stemd, psiCav, maxNsteps, psiStep, psiMax, ntrial, psiTol, ETol));
    return rcpp_result_gen;
END_RCPP
}
// maximumStemHydraulicConductance
double maximumStemHydraulicConductance(double xylemConductivity, double Al2As, double height);
RcppExport SEXP _medfate_maximumStemHydraulicConductance(SEXP xylemConductivitySEXP, SEXP Al2AsSEXP, SEXP heightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type xylemConductivity(xylemConductivitySEXP);
    Rcpp::traits::input_parameter< double >::type Al2As(Al2AsSEXP);
    Rcpp::traits::input_parameter< double >::type height(heightSEXP);
    rcpp_result_gen = Rcpp::wrap(maximumStemHydraulicConductance(xylemConductivity, Al2As, height));
    return rcpp_result_gen;
END_RCPP
}
// parcohort
NumericVector parcohort(IntegerVector SP, NumericVector H, NumericVector CR, NumericVector LAI, DataFrame SpParams);
RcppExport SEXP _medfate_parcohort(SEXP SPSEXP, SEXP HSEXP, SEXP CRSEXP, SEXP LAISEXP, SEXP SpParamsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type SP(SPSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type H(HSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CR(CRSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type LAI(LAISEXP);
    Rcpp::traits::input_parameter< DataFrame >::type SpParams(SpParamsSEXP);
    rcpp_result_gen = Rcpp::wrap(parcohort(SP, H, CR, LAI, SpParams));
    return rcpp_result_gen;
END_RCPP
}
// parheight
NumericVector parheight(NumericVector heights, IntegerVector SP, NumericVector H, NumericVector CR, NumericVector LAI, DataFrame SpParams);
RcppExport SEXP _medfate_parheight(SEXP heightsSEXP, SEXP SPSEXP, SEXP HSEXP, SEXP CRSEXP, SEXP LAISEXP, SEXP SpParamsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type heights(heightsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type SP(SPSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type H(HSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CR(CRSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type LAI(LAISEXP);
    Rcpp::traits::input_parameter< DataFrame >::type SpParams(SpParamsSEXP);
    rcpp_result_gen = Rcpp::wrap(parheight(heights, SP, H, CR, LAI, SpParams));
    return rcpp_result_gen;
END_RCPP
}
// swrheight
NumericVector swrheight(NumericVector heights, IntegerVector SP, NumericVector H, NumericVector CR, NumericVector LAI, DataFrame SpParams);
RcppExport SEXP _medfate_swrheight(SEXP heightsSEXP, SEXP SPSEXP, SEXP HSEXP, SEXP CRSEXP, SEXP LAISEXP, SEXP SpParamsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type heights(heightsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type SP(SPSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type H(HSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type CR(CRSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type LAI(LAISEXP);
    Rcpp::traits::input_parameter< DataFrame >::type SpParams(SpParamsSEXP);
    rcpp_result_gen = Rcpp::wrap(swrheight(heights, SP, H, CR, LAI, SpParams));
    return rcpp_result_gen;
END_RCPP
}
// parExtinctionProfile
NumericVector parExtinctionProfile(NumericVector z, List x, DataFrame SpParams, double gdd);
RcppExport SEXP _medfate_parExtinctionProfile(SEXP zSEXP, SEXP xSEXP, SEXP SpParamsSEXP, SEXP gddSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type z(zSEXP);
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type SpParams(SpParamsSEXP);
    Rcpp::traits::input_parameter< double >::type gdd(gddSEXP);
    rcpp_result_gen = Rcpp::wrap(parExtinctionProfile(z, x, SpParams, gdd));
    return rcpp_result_gen;
END_RCPP
}
// swrExtinctionProfile
NumericVector swrExtinctionProfile(NumericVector z, List x, DataFrame SpParams, double gdd);
RcppExport SEXP _medfate_swrExtinctionProfile(SEXP zSEXP, SEXP xSEXP, SEXP SpParamsSEXP, SEXP gddSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type z(zSEXP);
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type SpParams(SpParamsSEXP);
    Rcpp::traits::input_parameter< double >::type gdd(gddSEXP);
    rcpp_result_gen = Rcpp::wrap(swrExtinctionProfile(z, x, SpParams, gdd));
    return rcpp_result_gen;
END_RCPP
}
// cohortAbsorbedSWRFraction
NumericVector cohortAbsorbedSWRFraction(NumericVector z, List x, DataFrame SpParams, double gdd);
RcppExport SEXP _medfate_cohortAbsorbedSWRFraction(SEXP zSEXP, SEXP xSEXP, SEXP SpParamsSEXP, SEXP gddSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type z(zSEXP);
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type SpParams(SpParamsSEXP);
    Rcpp::traits::input_parameter< double >::type gdd(gddSEXP);
    rcpp_result_gen = Rcpp::wrap(cohortAbsorbedSWRFraction(z, x, SpParams, gdd));
    return rcpp_result_gen;
END_RCPP
}
// layerIrradianceFraction
NumericVector layerIrradianceFraction(NumericMatrix LAIme, NumericMatrix LAImd, NumericVector k, NumericVector alpha);
RcppExport SEXP _medfate_layerIrradianceFraction(SEXP LAImeSEXP, SEXP LAImdSEXP, SEXP kSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type LAIme(LAImeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type LAImd(LAImdSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type k(kSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(layerIrradianceFraction(LAIme, LAImd, k, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cohortSunlitShadeAbsorbedRadiation
List cohortSunlitShadeAbsorbedRadiation(double Ib0, double Id0, NumericVector Ibf, NumericVector Idf, double beta, NumericMatrix LAIme, NumericMatrix LAImd, NumericVector kb, NumericVector kd, NumericVector alpha, double gamma);
RcppExport SEXP _medfate_cohortSunlitShadeAbsorbedRadiation(SEXP Ib0SEXP, SEXP Id0SEXP, SEXP IbfSEXP, SEXP IdfSEXP, SEXP betaSEXP, SEXP LAImeSEXP, SEXP LAImdSEXP, SEXP kbSEXP, SEXP kdSEXP, SEXP alphaSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type Ib0(Ib0SEXP);
    Rcpp::traits::input_parameter< double >::type Id0(Id0SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Ibf(IbfSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Idf(IdfSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type LAIme(LAImeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type LAImd(LAImdSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type kb(kbSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type kd(kdSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(cohortSunlitShadeAbsorbedRadiation(Ib0, Id0, Ibf, Idf, beta, LAIme, LAImd, kb, kd, alpha, gamma));
    return rcpp_result_gen;
END_RCPP
}
// layerSunlitFraction
NumericVector layerSunlitFraction(NumericMatrix LAIme, NumericMatrix LAImd, NumericVector kb);
RcppExport SEXP _medfate_layerSunlitFraction(SEXP LAImeSEXP, SEXP LAImdSEXP, SEXP kbSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type LAIme(LAImeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type LAImd(LAImdSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type kb(kbSEXP);
    rcpp_result_gen = Rcpp::wrap(layerSunlitFraction(LAIme, LAImd, kb));
    return rcpp_result_gen;
END_RCPP
}
// checkSpeciesParameters
void checkSpeciesParameters(DataFrame SpParams, CharacterVector params);
RcppExport SEXP _medfate_checkSpeciesParameters(SEXP SpParamsSEXP, SEXP paramsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type SpParams(SpParamsSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type params(paramsSEXP);
    checkSpeciesParameters(SpParams, params);
    return R_NilValue;
END_RCPP
}
// swbInput
List swbInput(DataFrame above, NumericMatrix V, List soil, DataFrame SpParams, List control);
RcppExport SEXP _medfate_swbInput(SEXP aboveSEXP, SEXP VSEXP, SEXP soilSEXP, SEXP SpParamsSEXP, SEXP controlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type above(aboveSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type V(VSEXP);
    Rcpp::traits::input_parameter< List >::type soil(soilSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type SpParams(SpParamsSEXP);
    Rcpp::traits::input_parameter< List >::type control(controlSEXP);
    rcpp_result_gen = Rcpp::wrap(swbInput(above, V, soil, SpParams, control));
    return rcpp_result_gen;
END_RCPP
}
// forest2swbInput
List forest2swbInput(List x, List soil, DataFrame SpParams, List control);
RcppExport SEXP _medfate_forest2swbInput(SEXP xSEXP, SEXP soilSEXP, SEXP SpParamsSEXP, SEXP controlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< List >::type soil(soilSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type SpParams(SpParamsSEXP);
    Rcpp::traits::input_parameter< List >::type control(controlSEXP);
    rcpp_result_gen = Rcpp::wrap(forest2swbInput(x, soil, SpParams, control));
    return rcpp_result_gen;
END_RCPP
}
// growthInput
List growthInput(DataFrame above, NumericVector Z, NumericMatrix V, List soil, DataFrame SpParams, List control);
RcppExport SEXP _medfate_growthInput(SEXP aboveSEXP, SEXP ZSEXP, SEXP VSEXP, SEXP soilSEXP, SEXP SpParamsSEXP, SEXP controlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type above(aboveSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type V(VSEXP);
    Rcpp::traits::input_parameter< List >::type soil(soilSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type SpParams(SpParamsSEXP);
    Rcpp::traits::input_parameter< List >::type control(controlSEXP);
    rcpp_result_gen = Rcpp::wrap(growthInput(above, Z, V, soil, SpParams, control));
    return rcpp_result_gen;
END_RCPP
}
// forest2growthInput
List forest2growthInput(List x, List soil, DataFrame SpParams, List control);
RcppExport SEXP _medfate_forest2growthInput(SEXP xSEXP, SEXP soilSEXP, SEXP SpParamsSEXP, SEXP controlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< List >::type soil(soilSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type SpParams(SpParamsSEXP);
    Rcpp::traits::input_parameter< List >::type control(controlSEXP);
    rcpp_result_gen = Rcpp::wrap(forest2growthInput(x, soil, SpParams, control));
    return rcpp_result_gen;
END_RCPP
}
// gammaTemp
double gammaTemp(double leaf_temp);
RcppExport SEXP _medfate_gammaTemp(SEXP leaf_tempSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type leaf_temp(leaf_tempSEXP);
    rcpp_result_gen = Rcpp::wrap(gammaTemp(leaf_temp));
    return rcpp_result_gen;
END_RCPP
}
// KmTemp
double KmTemp(double leaf_temp, double Oi);
RcppExport SEXP _medfate_KmTemp(SEXP leaf_tempSEXP, SEXP OiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type leaf_temp(leaf_tempSEXP);
    Rcpp::traits::input_parameter< double >::type Oi(OiSEXP);
    rcpp_result_gen = Rcpp::wrap(KmTemp(leaf_temp, Oi));
    return rcpp_result_gen;
END_RCPP
}
// VmaxTemp
double VmaxTemp(double Vmax298, double leaf_temp);
RcppExport SEXP _medfate_VmaxTemp(SEXP Vmax298SEXP, SEXP leaf_tempSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type Vmax298(Vmax298SEXP);
    Rcpp::traits::input_parameter< double >::type leaf_temp(leaf_tempSEXP);
    rcpp_result_gen = Rcpp::wrap(VmaxTemp(Vmax298, leaf_temp));
    return rcpp_result_gen;
END_RCPP
}
// JmaxTemp
double JmaxTemp(double Jmax298, double leaf_temp);
RcppExport SEXP _medfate_JmaxTemp(SEXP Jmax298SEXP, SEXP leaf_tempSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type Jmax298(Jmax298SEXP);
    Rcpp::traits::input_parameter< double >::type leaf_temp(leaf_tempSEXP);
    rcpp_result_gen = Rcpp::wrap(JmaxTemp(Jmax298, leaf_temp));
    return rcpp_result_gen;
END_RCPP
}
// electronLimitedPhotosynthesis
double electronLimitedPhotosynthesis(double Q, double Ci, double GT, double Jmax);
RcppExport SEXP _medfate_electronLimitedPhotosynthesis(SEXP QSEXP, SEXP CiSEXP, SEXP GTSEXP, SEXP JmaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type Q(QSEXP);
    Rcpp::traits::input_parameter< double >::type Ci(CiSEXP);
    Rcpp::traits::input_parameter< double >::type GT(GTSEXP);
    Rcpp::traits::input_parameter< double >::type Jmax(JmaxSEXP);
    rcpp_result_gen = Rcpp::wrap(electronLimitedPhotosynthesis(Q, Ci, GT, Jmax));
    return rcpp_result_gen;
END_RCPP
}
// rubiscoLimitedPhotosynthesis
double rubiscoLimitedPhotosynthesis(double Ci, double GT, double Km, double Vmax);
RcppExport SEXP _medfate_rubiscoLimitedPhotosynthesis(SEXP CiSEXP, SEXP GTSEXP, SEXP KmSEXP, SEXP VmaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type Ci(CiSEXP);
    Rcpp::traits::input_parameter< double >::type GT(GTSEXP);
    Rcpp::traits::input_parameter< double >::type Km(KmSEXP);
    Rcpp::traits::input_parameter< double >::type Vmax(VmaxSEXP);
    rcpp_result_gen = Rcpp::wrap(rubiscoLimitedPhotosynthesis(Ci, GT, Km, Vmax));
    return rcpp_result_gen;
END_RCPP
}
// photosynthesis
double photosynthesis(double Q, double Catm, double Gc, double leaf_temp, double Vmax298, double Jmax298, bool verbose);
RcppExport SEXP _medfate_photosynthesis(SEXP QSEXP, SEXP CatmSEXP, SEXP GcSEXP, SEXP leaf_tempSEXP, SEXP Vmax298SEXP, SEXP Jmax298SEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type Q(QSEXP);
    Rcpp::traits::input_parameter< double >::type Catm(CatmSEXP);
    Rcpp::traits::input_parameter< double >::type Gc(GcSEXP);
    Rcpp::traits::input_parameter< double >::type leaf_temp(leaf_tempSEXP);
    Rcpp::traits::input_parameter< double >::type Vmax298(Vmax298SEXP);
    Rcpp::traits::input_parameter< double >::type Jmax298(Jmax298SEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(photosynthesis(Q, Catm, Gc, leaf_temp, Vmax298, Jmax298, verbose));
    return rcpp_result_gen;
END_RCPP
}
// leafPhotosynthesisFunction
List leafPhotosynthesisFunction(List supplyFunction, double Catm, double Patm, double Tair, double vpa, double u, double absRad, double Q, double Vmax298, double Jmax298, double Gwmin, double Gwmax, double refLeafArea, bool verbose);
RcppExport SEXP _medfate_leafPhotosynthesisFunction(SEXP supplyFunctionSEXP, SEXP CatmSEXP, SEXP PatmSEXP, SEXP TairSEXP, SEXP vpaSEXP, SEXP uSEXP, SEXP absRadSEXP, SEXP QSEXP, SEXP Vmax298SEXP, SEXP Jmax298SEXP, SEXP GwminSEXP, SEXP GwmaxSEXP, SEXP refLeafAreaSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type supplyFunction(supplyFunctionSEXP);
    Rcpp::traits::input_parameter< double >::type Catm(CatmSEXP);
    Rcpp::traits::input_parameter< double >::type Patm(PatmSEXP);
    Rcpp::traits::input_parameter< double >::type Tair(TairSEXP);
    Rcpp::traits::input_parameter< double >::type vpa(vpaSEXP);
    Rcpp::traits::input_parameter< double >::type u(uSEXP);
    Rcpp::traits::input_parameter< double >::type absRad(absRadSEXP);
    Rcpp::traits::input_parameter< double >::type Q(QSEXP);
    Rcpp::traits::input_parameter< double >::type Vmax298(Vmax298SEXP);
    Rcpp::traits::input_parameter< double >::type Jmax298(Jmax298SEXP);
    Rcpp::traits::input_parameter< double >::type Gwmin(GwminSEXP);
    Rcpp::traits::input_parameter< double >::type Gwmax(GwmaxSEXP);
    Rcpp::traits::input_parameter< double >::type refLeafArea(refLeafAreaSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(leafPhotosynthesisFunction(supplyFunction, Catm, Patm, Tair, vpa, u, absRad, Q, Vmax298, Jmax298, Gwmin, Gwmax, refLeafArea, verbose));
    return rcpp_result_gen;
END_RCPP
}
// sunshadePhotosynthesisFunction
List sunshadePhotosynthesisFunction(List supplyFunction, double Catm, double Patm, double Tair, double vpa, double SLarea, double SHarea, double u, double absRadSL, double absRadSH, double QSL, double QSH, double Vmax298SL, double Vmax298SH, double Jmax298SL, double Jmax298SH, double Gwmin, double Gwmax, bool verbose);
RcppExport SEXP _medfate_sunshadePhotosynthesisFunction(SEXP supplyFunctionSEXP, SEXP CatmSEXP, SEXP PatmSEXP, SEXP TairSEXP, SEXP vpaSEXP, SEXP SLareaSEXP, SEXP SHareaSEXP, SEXP uSEXP, SEXP absRadSLSEXP, SEXP absRadSHSEXP, SEXP QSLSEXP, SEXP QSHSEXP, SEXP Vmax298SLSEXP, SEXP Vmax298SHSEXP, SEXP Jmax298SLSEXP, SEXP Jmax298SHSEXP, SEXP GwminSEXP, SEXP GwmaxSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type supplyFunction(supplyFunctionSEXP);
    Rcpp::traits::input_parameter< double >::type Catm(CatmSEXP);
    Rcpp::traits::input_parameter< double >::type Patm(PatmSEXP);
    Rcpp::traits::input_parameter< double >::type Tair(TairSEXP);
    Rcpp::traits::input_parameter< double >::type vpa(vpaSEXP);
    Rcpp::traits::input_parameter< double >::type SLarea(SLareaSEXP);
    Rcpp::traits::input_parameter< double >::type SHarea(SHareaSEXP);
    Rcpp::traits::input_parameter< double >::type u(uSEXP);
    Rcpp::traits::input_parameter< double >::type absRadSL(absRadSLSEXP);
    Rcpp::traits::input_parameter< double >::type absRadSH(absRadSHSEXP);
    Rcpp::traits::input_parameter< double >::type QSL(QSLSEXP);
    Rcpp::traits::input_parameter< double >::type QSH(QSHSEXP);
    Rcpp::traits::input_parameter< double >::type Vmax298SL(Vmax298SLSEXP);
    Rcpp::traits::input_parameter< double >::type Vmax298SH(Vmax298SHSEXP);
    Rcpp::traits::input_parameter< double >::type Jmax298SL(Jmax298SLSEXP);
    Rcpp::traits::input_parameter< double >::type Jmax298SH(Jmax298SHSEXP);
    Rcpp::traits::input_parameter< double >::type Gwmin(GwminSEXP);
    Rcpp::traits::input_parameter< double >::type Gwmax(GwmaxSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(sunshadePhotosynthesisFunction(supplyFunction, Catm, Patm, Tair, vpa, SLarea, SHarea, u, absRadSL, absRadSH, QSL, QSH, Vmax298SL, Vmax298SH, Jmax298SL, Jmax298SH, Gwmin, Gwmax, verbose));
    return rcpp_result_gen;
END_RCPP
}
// multilayerPhotosynthesisFunction
List multilayerPhotosynthesisFunction(List supplyFunction, double Catm, double Patm, double Tair, double vpa, NumericVector SLarea, NumericVector SHarea, NumericVector u, NumericVector absRadSL, NumericVector absRadSH, NumericVector QSL, NumericVector QSH, NumericVector Vmax298, NumericVector Jmax298, double Gwmin, double Gwmax, bool verbose);
RcppExport SEXP _medfate_multilayerPhotosynthesisFunction(SEXP supplyFunctionSEXP, SEXP CatmSEXP, SEXP PatmSEXP, SEXP TairSEXP, SEXP vpaSEXP, SEXP SLareaSEXP, SEXP SHareaSEXP, SEXP uSEXP, SEXP absRadSLSEXP, SEXP absRadSHSEXP, SEXP QSLSEXP, SEXP QSHSEXP, SEXP Vmax298SEXP, SEXP Jmax298SEXP, SEXP GwminSEXP, SEXP GwmaxSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type supplyFunction(supplyFunctionSEXP);
    Rcpp::traits::input_parameter< double >::type Catm(CatmSEXP);
    Rcpp::traits::input_parameter< double >::type Patm(PatmSEXP);
    Rcpp::traits::input_parameter< double >::type Tair(TairSEXP);
    Rcpp::traits::input_parameter< double >::type vpa(vpaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type SLarea(SLareaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type SHarea(SHareaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type u(uSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type absRadSL(absRadSLSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type absRadSH(absRadSHSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type QSL(QSLSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type QSH(QSHSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Vmax298(Vmax298SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Jmax298(Jmax298SEXP);
    Rcpp::traits::input_parameter< double >::type Gwmin(GwminSEXP);
    Rcpp::traits::input_parameter< double >::type Gwmax(GwmaxSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(multilayerPhotosynthesisFunction(supplyFunction, Catm, Patm, Tair, vpa, SLarea, SHarea, u, absRadSL, absRadSH, QSL, QSH, Vmax298, Jmax298, Gwmin, Gwmax, verbose));
    return rcpp_result_gen;
END_RCPP
}
// profitMaximization
List profitMaximization(List supplyFunction, List photosynthesisFunction);
RcppExport SEXP _medfate_profitMaximization(SEXP supplyFunctionSEXP, SEXP photosynthesisFunctionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type supplyFunction(supplyFunctionSEXP);
    Rcpp::traits::input_parameter< List >::type photosynthesisFunction(photosynthesisFunctionSEXP);
    rcpp_result_gen = Rcpp::wrap(profitMaximization(supplyFunction, photosynthesisFunction));
    return rcpp_result_gen;
END_RCPP
}
// profitMaximization2
List profitMaximization2(List supplyFunction, List photosynthesisFunction, double kstemmax);
RcppExport SEXP _medfate_profitMaximization2(SEXP supplyFunctionSEXP, SEXP photosynthesisFunctionSEXP, SEXP kstemmaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type supplyFunction(supplyFunctionSEXP);
    Rcpp::traits::input_parameter< List >::type photosynthesisFunction(photosynthesisFunctionSEXP);
    Rcpp::traits::input_parameter< double >::type kstemmax(kstemmaxSEXP);
    rcpp_result_gen = Rcpp::wrap(profitMaximization2(supplyFunction, photosynthesisFunction, kstemmax));
    return rcpp_result_gen;
END_RCPP
}
// profitMaximization3
List profitMaximization3(List supplyFunction, List photosynthesisFunction, double kstemmax);
RcppExport SEXP _medfate_profitMaximization3(SEXP supplyFunctionSEXP, SEXP photosynthesisFunctionSEXP, SEXP kstemmaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type supplyFunction(supplyFunctionSEXP);
    Rcpp::traits::input_parameter< List >::type photosynthesisFunction(photosynthesisFunctionSEXP);
    Rcpp::traits::input_parameter< double >::type kstemmax(kstemmaxSEXP);
    rcpp_result_gen = Rcpp::wrap(profitMaximization3(supplyFunction, photosynthesisFunction, kstemmax));
    return rcpp_result_gen;
END_RCPP
}
// conicDistribution
NumericMatrix conicDistribution(NumericVector Zcone, NumericVector d);
RcppExport SEXP _medfate_conicDistribution(SEXP ZconeSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Zcone(ZconeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(conicDistribution(Zcone, d));
    return rcpp_result_gen;
END_RCPP
}
// ldrDistribution
NumericMatrix ldrDistribution(NumericVector Z50, NumericVector Z95, NumericVector d);
RcppExport SEXP _medfate_ldrDistribution(SEXP Z50SEXP, SEXP Z95SEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Z50(Z50SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Z95(Z95SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(ldrDistribution(Z50, Z95, d));
    return rcpp_result_gen;
END_RCPP
}
// xylemConductanceProportions
NumericVector xylemConductanceProportions(NumericVector v, NumericVector d, double depthWidthRatio);
RcppExport SEXP _medfate_xylemConductanceProportions(SEXP vSEXP, SEXP dSEXP, SEXP depthWidthRatioSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type depthWidthRatio(depthWidthRatioSEXP);
    rcpp_result_gen = Rcpp::wrap(xylemConductanceProportions(v, d, depthWidthRatio));
    return rcpp_result_gen;
END_RCPP
}
// theta2psi
double theta2psi(double clay, double sand, double theta);
RcppExport SEXP _medfate_theta2psi(SEXP claySEXP, SEXP sandSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type clay(claySEXP);
    Rcpp::traits::input_parameter< double >::type sand(sandSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(theta2psi(clay, sand, theta));
    return rcpp_result_gen;
END_RCPP
}
// psi2theta
double psi2theta(double clay, double sand, double psi);
RcppExport SEXP _medfate_psi2theta(SEXP claySEXP, SEXP sandSEXP, SEXP psiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type clay(claySEXP);
    Rcpp::traits::input_parameter< double >::type sand(sandSEXP);
    Rcpp::traits::input_parameter< double >::type psi(psiSEXP);
    rcpp_result_gen = Rcpp::wrap(psi2theta(clay, sand, psi));
    return rcpp_result_gen;
END_RCPP
}
// soilUSDAType
String soilUSDAType(double clay, double sand);
RcppExport SEXP _medfate_soilUSDAType(SEXP claySEXP, SEXP sandSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type clay(claySEXP);
    Rcpp::traits::input_parameter< double >::type sand(sandSEXP);
    rcpp_result_gen = Rcpp::wrap(soilUSDAType(clay, sand));
    return rcpp_result_gen;
END_RCPP
}
// vanGenuchtenParams
NumericVector vanGenuchtenParams(String soilType);
RcppExport SEXP _medfate_vanGenuchtenParams(SEXP soilTypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< String >::type soilType(soilTypeSEXP);
    rcpp_result_gen = Rcpp::wrap(vanGenuchtenParams(soilType));
    return rcpp_result_gen;
END_RCPP
}
// soil
List soil(List SoilParams, NumericVector W);
RcppExport SEXP _medfate_soil(SEXP SoilParamsSEXP, SEXP WSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type SoilParams(SoilParamsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type W(WSEXP);
    rcpp_result_gen = Rcpp::wrap(soil(SoilParams, W));
    return rcpp_result_gen;
END_RCPP
}
// er
NumericVector er(IntegerVector DOY, double ERconv, double ERsyn);
RcppExport SEXP _medfate_er(SEXP DOYSEXP, SEXP ERconvSEXP, SEXP ERsynSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type DOY(DOYSEXP);
    Rcpp::traits::input_parameter< double >::type ERconv(ERconvSEXP);
    Rcpp::traits::input_parameter< double >::type ERsyn(ERsynSEXP);
    rcpp_result_gen = Rcpp::wrap(er(DOY, ERconv, ERsyn));
    return rcpp_result_gen;
END_RCPP
}
// gdd
NumericVector gdd(IntegerVector DOY, NumericVector Temp, double Tbase);
RcppExport SEXP _medfate_gdd(SEXP DOYSEXP, SEXP TempSEXP, SEXP TbaseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type DOY(DOYSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Temp(TempSEXP);
    Rcpp::traits::input_parameter< double >::type Tbase(TbaseSEXP);
    rcpp_result_gen = Rcpp::wrap(gdd(DOY, Temp, Tbase));
    return rcpp_result_gen;
END_RCPP
}
// soilevaporation
double soilevaporation(double DEF, double PETs, double Gsoil);
RcppExport SEXP _medfate_soilevaporation(SEXP DEFSEXP, SEXP PETsSEXP, SEXP GsoilSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type DEF(DEFSEXP);
    Rcpp::traits::input_parameter< double >::type PETs(PETsSEXP);
    Rcpp::traits::input_parameter< double >::type Gsoil(GsoilSEXP);
    rcpp_result_gen = Rcpp::wrap(soilevaporation(DEF, PETs, Gsoil));
    return rcpp_result_gen;
END_RCPP
}
// infiltrationDay
double infiltrationDay(double NetPrec, double Ssoil);
RcppExport SEXP _medfate_infiltrationDay(SEXP NetPrecSEXP, SEXP SsoilSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type NetPrec(NetPrecSEXP);
    Rcpp::traits::input_parameter< double >::type Ssoil(SsoilSEXP);
    rcpp_result_gen = Rcpp::wrap(infiltrationDay(NetPrec, Ssoil));
    return rcpp_result_gen;
END_RCPP
}
// interceptionGashDay
double interceptionGashDay(double Precipitation, double Cm, double p, double ER);
RcppExport SEXP _medfate_interceptionGashDay(SEXP PrecipitationSEXP, SEXP CmSEXP, SEXP pSEXP, SEXP ERSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type Precipitation(PrecipitationSEXP);
    Rcpp::traits::input_parameter< double >::type Cm(CmSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type ER(ERSEXP);
    rcpp_result_gen = Rcpp::wrap(interceptionGashDay(Precipitation, Cm, p, ER));
    return rcpp_result_gen;
END_RCPP
}
// swbDay1
List swbDay1(List x, List soil, double tday, double pet, double rain, double er, double runon, bool verbose);
RcppExport SEXP _medfate_swbDay1(SEXP xSEXP, SEXP soilSEXP, SEXP tdaySEXP, SEXP petSEXP, SEXP rainSEXP, SEXP erSEXP, SEXP runonSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< List >::type soil(soilSEXP);
    Rcpp::traits::input_parameter< double >::type tday(tdaySEXP);
    Rcpp::traits::input_parameter< double >::type pet(petSEXP);
    Rcpp::traits::input_parameter< double >::type rain(rainSEXP);
    Rcpp::traits::input_parameter< double >::type er(erSEXP);
    Rcpp::traits::input_parameter< double >::type runon(runonSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(swbDay1(x, soil, tday, pet, rain, er, runon, verbose));
    return rcpp_result_gen;
END_RCPP
}
// swbDay2
List swbDay2(List x, List soil, double tmin, double tmax, double rhmin, double rhmax, double rad, double wind, double latitude, double elevation, double slope, double aspect, double solarConstant, double delta, double rain, double er, double runon, bool verbose);
RcppExport SEXP _medfate_swbDay2(SEXP xSEXP, SEXP soilSEXP, SEXP tminSEXP, SEXP tmaxSEXP, SEXP rhminSEXP, SEXP rhmaxSEXP, SEXP radSEXP, SEXP windSEXP, SEXP latitudeSEXP, SEXP elevationSEXP, SEXP slopeSEXP, SEXP aspectSEXP, SEXP solarConstantSEXP, SEXP deltaSEXP, SEXP rainSEXP, SEXP erSEXP, SEXP runonSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< List >::type soil(soilSEXP);
    Rcpp::traits::input_parameter< double >::type tmin(tminSEXP);
    Rcpp::traits::input_parameter< double >::type tmax(tmaxSEXP);
    Rcpp::traits::input_parameter< double >::type rhmin(rhminSEXP);
    Rcpp::traits::input_parameter< double >::type rhmax(rhmaxSEXP);
    Rcpp::traits::input_parameter< double >::type rad(radSEXP);
    Rcpp::traits::input_parameter< double >::type wind(windSEXP);
    Rcpp::traits::input_parameter< double >::type latitude(latitudeSEXP);
    Rcpp::traits::input_parameter< double >::type elevation(elevationSEXP);
    Rcpp::traits::input_parameter< double >::type slope(slopeSEXP);
    Rcpp::traits::input_parameter< double >::type aspect(aspectSEXP);
    Rcpp::traits::input_parameter< double >::type solarConstant(solarConstantSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< double >::type rain(rainSEXP);
    Rcpp::traits::input_parameter< double >::type er(erSEXP);
    Rcpp::traits::input_parameter< double >::type runon(runonSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(swbDay2(x, soil, tmin, tmax, rhmin, rhmax, rad, wind, latitude, elevation, slope, aspect, solarConstant, delta, rain, er, runon, verbose));
    return rcpp_result_gen;
END_RCPP
}
// swbDay
List swbDay(List x, List soil, CharacterVector date, int doy, double tmin, double tmax, double rhmin, double rhmax, double rad, double wind, double latitude, double elevation, double slope, double aspect, double rain, double er, double runon);
RcppExport SEXP _medfate_swbDay(SEXP xSEXP, SEXP soilSEXP, SEXP dateSEXP, SEXP doySEXP, SEXP tminSEXP, SEXP tmaxSEXP, SEXP rhminSEXP, SEXP rhmaxSEXP, SEXP radSEXP, SEXP windSEXP, SEXP latitudeSEXP, SEXP elevationSEXP, SEXP slopeSEXP, SEXP aspectSEXP, SEXP rainSEXP, SEXP erSEXP, SEXP runonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< List >::type soil(soilSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type date(dateSEXP);
    Rcpp::traits::input_parameter< int >::type doy(doySEXP);
    Rcpp::traits::input_parameter< double >::type tmin(tminSEXP);
    Rcpp::traits::input_parameter< double >::type tmax(tmaxSEXP);
    Rcpp::traits::input_parameter< double >::type rhmin(rhminSEXP);
    Rcpp::traits::input_parameter< double >::type rhmax(rhmaxSEXP);
    Rcpp::traits::input_parameter< double >::type rad(radSEXP);
    Rcpp::traits::input_parameter< double >::type wind(windSEXP);
    Rcpp::traits::input_parameter< double >::type latitude(latitudeSEXP);
    Rcpp::traits::input_parameter< double >::type elevation(elevationSEXP);
    Rcpp::traits::input_parameter< double >::type slope(slopeSEXP);
    Rcpp::traits::input_parameter< double >::type aspect(aspectSEXP);
    Rcpp::traits::input_parameter< double >::type rain(rainSEXP);
    Rcpp::traits::input_parameter< double >::type er(erSEXP);
    Rcpp::traits::input_parameter< double >::type runon(runonSEXP);
    rcpp_result_gen = Rcpp::wrap(swbDay(x, soil, date, doy, tmin, tmax, rhmin, rhmax, rad, wind, latitude, elevation, slope, aspect, rain, er, runon));
    return rcpp_result_gen;
END_RCPP
}
// swbgridDay
List swbgridDay(CharacterVector lct, List xList, List soilList, IntegerVector waterO, List queenNeigh, List waterQ, NumericVector gddVec, NumericVector petVec, NumericVector rainVec, NumericVector erVec, NumericVector trackSpecies);
RcppExport SEXP _medfate_swbgridDay(SEXP lctSEXP, SEXP xListSEXP, SEXP soilListSEXP, SEXP waterOSEXP, SEXP queenNeighSEXP, SEXP waterQSEXP, SEXP gddVecSEXP, SEXP petVecSEXP, SEXP rainVecSEXP, SEXP erVecSEXP, SEXP trackSpeciesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type lct(lctSEXP);
    Rcpp::traits::input_parameter< List >::type xList(xListSEXP);
    Rcpp::traits::input_parameter< List >::type soilList(soilListSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type waterO(waterOSEXP);
    Rcpp::traits::input_parameter< List >::type queenNeigh(queenNeighSEXP);
    Rcpp::traits::input_parameter< List >::type waterQ(waterQSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type gddVec(gddVecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type petVec(petVecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rainVec(rainVecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type erVec(erVecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type trackSpecies(trackSpeciesSEXP);
    rcpp_result_gen = Rcpp::wrap(swbgridDay(lct, xList, soilList, waterO, queenNeigh, waterQ, gddVec, petVec, rainVec, erVec, trackSpecies));
    return rcpp_result_gen;
END_RCPP
}
// swb
List swb(List x, List soil, DataFrame meteo, double latitude, double elevation, double slope, double aspect);
RcppExport SEXP _medfate_swb(SEXP xSEXP, SEXP soilSEXP, SEXP meteoSEXP, SEXP latitudeSEXP, SEXP elevationSEXP, SEXP slopeSEXP, SEXP aspectSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< List >::type soil(soilSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type meteo(meteoSEXP);
    Rcpp::traits::input_parameter< double >::type latitude(latitudeSEXP);
    Rcpp::traits::input_parameter< double >::type elevation(elevationSEXP);
    Rcpp::traits::input_parameter< double >::type slope(slopeSEXP);
    Rcpp::traits::input_parameter< double >::type aspect(aspectSEXP);
    rcpp_result_gen = Rcpp::wrap(swb(x, soil, meteo, latitude, elevation, slope, aspect));
    return rcpp_result_gen;
END_RCPP
}
// windSpeedAtCanopyHeight
double windSpeedAtCanopyHeight(double wind20H, double canopyHeight);
RcppExport SEXP _medfate_windSpeedAtCanopyHeight(SEXP wind20HSEXP, SEXP canopyHeightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type wind20H(wind20HSEXP);
    Rcpp::traits::input_parameter< double >::type canopyHeight(canopyHeightSEXP);
    rcpp_result_gen = Rcpp::wrap(windSpeedAtCanopyHeight(wind20H, canopyHeight));
    return rcpp_result_gen;
END_RCPP
}
// unshelteredMidflameWindSpeed
double unshelteredMidflameWindSpeed(double wind20H, double fuelBedHeight);
RcppExport SEXP _medfate_unshelteredMidflameWindSpeed(SEXP wind20HSEXP, SEXP fuelBedHeightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type wind20H(wind20HSEXP);
    Rcpp::traits::input_parameter< double >::type fuelBedHeight(fuelBedHeightSEXP);
    rcpp_result_gen = Rcpp::wrap(unshelteredMidflameWindSpeed(wind20H, fuelBedHeight));
    return rcpp_result_gen;
END_RCPP
}
// shelteredMidflameWindSpeed
double shelteredMidflameWindSpeed(double wind20H, double crownFillProportion, double topCanopyHeight);
RcppExport SEXP _medfate_shelteredMidflameWindSpeed(SEXP wind20HSEXP, SEXP crownFillProportionSEXP, SEXP topCanopyHeightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type wind20H(wind20HSEXP);
    Rcpp::traits::input_parameter< double >::type crownFillProportion(crownFillProportionSEXP);
    Rcpp::traits::input_parameter< double >::type topCanopyHeight(topCanopyHeightSEXP);
    rcpp_result_gen = Rcpp::wrap(shelteredMidflameWindSpeed(wind20H, crownFillProportion, topCanopyHeight));
    return rcpp_result_gen;
END_RCPP
}
// windAdjustmentFactor
double windAdjustmentFactor(double topShrubHeight, double bottomCanopyHeight, double topCanopyHeight, double canopyCover);
RcppExport SEXP _medfate_windAdjustmentFactor(SEXP topShrubHeightSEXP, SEXP bottomCanopyHeightSEXP, SEXP topCanopyHeightSEXP, SEXP canopyCoverSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type topShrubHeight(topShrubHeightSEXP);
    Rcpp::traits::input_parameter< double >::type bottomCanopyHeight(bottomCanopyHeightSEXP);
    Rcpp::traits::input_parameter< double >::type topCanopyHeight(topCanopyHeightSEXP);
    Rcpp::traits::input_parameter< double >::type canopyCover(canopyCoverSEXP);
    rcpp_result_gen = Rcpp::wrap(windAdjustmentFactor(topShrubHeight, bottomCanopyHeight, topCanopyHeight, canopyCover));
    return rcpp_result_gen;
END_RCPP
}
// windSpeedAtHeightOverCanopy
double windSpeedAtHeightOverCanopy(double z, double wind20H, double canopyHeight);
RcppExport SEXP _medfate_windSpeedAtHeightOverCanopy(SEXP zSEXP, SEXP wind20HSEXP, SEXP canopyHeightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type z(zSEXP);
    Rcpp::traits::input_parameter< double >::type wind20H(wind20HSEXP);
    Rcpp::traits::input_parameter< double >::type canopyHeight(canopyHeightSEXP);
    rcpp_result_gen = Rcpp::wrap(windSpeedAtHeightOverCanopy(z, wind20H, canopyHeight));
    return rcpp_result_gen;
END_RCPP
}
// windExtinctionProfile
NumericVector windExtinctionProfile(NumericVector z, double wind20H, double LAIc, double canopyHeight);
RcppExport SEXP _medfate_windExtinctionProfile(SEXP zSEXP, SEXP wind20HSEXP, SEXP LAIcSEXP, SEXP canopyHeightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type z(zSEXP);
    Rcpp::traits::input_parameter< double >::type wind20H(wind20HSEXP);
    Rcpp::traits::input_parameter< double >::type LAIc(LAIcSEXP);
    Rcpp::traits::input_parameter< double >::type canopyHeight(canopyHeightSEXP);
    rcpp_result_gen = Rcpp::wrap(windExtinctionProfile(z, wind20H, LAIc, canopyHeight));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_medfate_radiationDiurnalPattern", (DL_FUNC) &_medfate_radiationDiurnalPattern, 2},
    {"_medfate_temperatureDiurnalPattern", (DL_FUNC) &_medfate_temperatureDiurnalPattern, 4},
    {"_medfate_leafTemperature", (DL_FUNC) &_medfate_leafTemperature, 5},
    {"_medfate_FCCSbehaviour", (DL_FUNC) &_medfate_FCCSbehaviour, 5},
    {"_medfate_rothermel", (DL_FUNC) &_medfate_rothermel, 11},
    {"_medfate_genros", (DL_FUNC) &_medfate_genros, 8},
    {"_medfate_ellipseROS", (DL_FUNC) &_medfate_ellipseROS, 4},
    {"_medfate_doubleEllipseROS", (DL_FUNC) &_medfate_doubleEllipseROS, 4},
    {"_medfate_fireBrandFallingHeight", (DL_FUNC) &_medfate_fireBrandFallingHeight, 3},
    {"_medfate_totalFirebrandLoftingTime", (DL_FUNC) &_medfate_totalFirebrandLoftingTime, 4},
    {"_medfate_totalGasFlowPersistenceTime", (DL_FUNC) &_medfate_totalGasFlowPersistenceTime, 3},
    {"_medfate_findFireBrandLoftedHeight", (DL_FUNC) &_medfate_findFireBrandLoftedHeight, 4},
    {"_medfate_willBurnWhenHitFloor", (DL_FUNC) &_medfate_willBurnWhenHitFloor, 2},
    {"_medfate_fireBrandBurningTimeFromCanopyStructure", (DL_FUNC) &_medfate_fireBrandBurningTimeFromCanopyStructure, 1},
    {"_medfate_fireBrandFlameHeightFromCanopyStructure", (DL_FUNC) &_medfate_fireBrandFlameHeightFromCanopyStructure, 2},
    {"_medfate_criticalFirelineIntensity", (DL_FUNC) &_medfate_criticalFirelineIntensity, 2},
    {"_medfate_cohortParameter", (DL_FUNC) &_medfate_cohortParameter, 3},
    {"_medfate_cohortCharacterParameter", (DL_FUNC) &_medfate_cohortCharacterParameter, 3},
    {"_medfate_cohortSpecies", (DL_FUNC) &_medfate_cohortSpecies, 1},
    {"_medfate_cohortSpeciesName", (DL_FUNC) &_medfate_cohortSpeciesName, 2},
    {"_medfate_cohortIDs", (DL_FUNC) &_medfate_cohortIDs, 2},
    {"_medfate_treeBasalArea", (DL_FUNC) &_medfate_treeBasalArea, 2},
    {"_medfate_cohortBasalArea", (DL_FUNC) &_medfate_cohortBasalArea, 1},
    {"_medfate_speciesBasalArea", (DL_FUNC) &_medfate_speciesBasalArea, 2},
    {"_medfate_cohortLargerTreeBasalArea", (DL_FUNC) &_medfate_cohortLargerTreeBasalArea, 1},
    {"_medfate_forestBasalArea", (DL_FUNC) &_medfate_forestBasalArea, 1},
    {"_medfate_cohortDensity", (DL_FUNC) &_medfate_cohortDensity, 2},
    {"_medfate_cohortHeight", (DL_FUNC) &_medfate_cohortHeight, 1},
    {"_medfate_shrubCrownRatio", (DL_FUNC) &_medfate_shrubCrownRatio, 2},
    {"_medfate_cohortCrownRatio", (DL_FUNC) &_medfate_cohortCrownRatio, 2},
    {"_medfate_cohortCrownBaseHeight", (DL_FUNC) &_medfate_cohortCrownBaseHeight, 2},
    {"_medfate_cohortCrownLength", (DL_FUNC) &_medfate_cohortCrownLength, 2},
    {"_medfate_treeFoliarBiomass", (DL_FUNC) &_medfate_treeFoliarBiomass, 5},
    {"_medfate_shrubFoliarBiomass", (DL_FUNC) &_medfate_shrubFoliarBiomass, 6},
    {"_medfate_cohortFoliarBiomass", (DL_FUNC) &_medfate_cohortFoliarBiomass, 3},
    {"_medfate_shrubCover", (DL_FUNC) &_medfate_shrubCover, 2},
    {"_medfate_cohortCover", (DL_FUNC) &_medfate_cohortCover, 1},
    {"_medfate_shrubCrownPhytovolume", (DL_FUNC) &_medfate_shrubCrownPhytovolume, 5},
    {"_medfate_cohortPhytovolume", (DL_FUNC) &_medfate_cohortPhytovolume, 2},
    {"_medfate_treeFuel", (DL_FUNC) &_medfate_treeFuel, 6},
    {"_medfate_shrubFuel", (DL_FUNC) &_medfate_shrubFuel, 7},
    {"_medfate_cohortFuel", (DL_FUNC) &_medfate_cohortFuel, 4},
    {"_medfate_cohortEquilibriumLeafLitter", (DL_FUNC) &_medfate_cohortEquilibriumLeafLitter, 3},
    {"_medfate_cohortEquilibriumSmallBranchLitter", (DL_FUNC) &_medfate_cohortEquilibriumSmallBranchLitter, 3},
    {"_medfate_treeLAI", (DL_FUNC) &_medfate_treeLAI, 5},
    {"_medfate_shrubLAI", (DL_FUNC) &_medfate_shrubLAI, 5},
    {"_medfate_cohortLAI", (DL_FUNC) &_medfate_cohortLAI, 3},
    {"_medfate_LAIdistribution", (DL_FUNC) &_medfate_LAIdistribution, 4},
    {"_medfate_LAIprofile", (DL_FUNC) &_medfate_LAIprofile, 4},
    {"_medfate_forest2aboveground", (DL_FUNC) &_medfate_forest2aboveground, 3},
    {"_medfate_fuelConditions", (DL_FUNC) &_medfate_fuelConditions, 4},
    {"_medfate_EMCdesorption", (DL_FUNC) &_medfate_EMCdesorption, 2},
    {"_medfate_EMCadsorption", (DL_FUNC) &_medfate_EMCadsorption, 2},
    {"_medfate_EMCSimard", (DL_FUNC) &_medfate_EMCSimard, 2},
    {"_medfate_woodyFuelProfile", (DL_FUNC) &_medfate_woodyFuelProfile, 4},
    {"_medfate_layerCohortFuelLoading", (DL_FUNC) &_medfate_layerCohortFuelLoading, 5},
    {"_medfate_layerFuelLoading", (DL_FUNC) &_medfate_layerFuelLoading, 5},
    {"_medfate_layerLAI", (DL_FUNC) &_medfate_layerLAI, 5},
    {"_medfate_layerFuelAverageSpeciesParameter", (DL_FUNC) &_medfate_layerFuelAverageSpeciesParameter, 6},
    {"_medfate_layerFuelAverageParameter", (DL_FUNC) &_medfate_layerFuelAverageParameter, 6},
    {"_medfate_layerFuelAverageCrownLength", (DL_FUNC) &_medfate_layerFuelAverageCrownLength, 6},
    {"_medfate_fuelLiveStratification", (DL_FUNC) &_medfate_fuelLiveStratification, 6},
    {"_medfate_FCCSproperties", (DL_FUNC) &_medfate_FCCSproperties, 8},
    {"_medfate_defoliationFraction", (DL_FUNC) &_medfate_defoliationFraction, 2},
    {"_medfate_growth", (DL_FUNC) &_medfate_growth, 7},
    {"_medfate_Psi2K", (DL_FUNC) &_medfate_Psi2K, 3},
    {"_medfate_K2Psi", (DL_FUNC) &_medfate_K2Psi, 3},
    {"_medfate_averagePsi", (DL_FUNC) &_medfate_averagePsi, 4},
    {"_medfate_gammds", (DL_FUNC) &_medfate_gammds, 2},
    {"_medfate_xylemConductance", (DL_FUNC) &_medfate_xylemConductance, 4},
    {"_medfate_xylemPsi", (DL_FUNC) &_medfate_xylemPsi, 4},
    {"_medfate_Egamma", (DL_FUNC) &_medfate_Egamma, 5},
    {"_medfate_EXylem", (DL_FUNC) &_medfate_EXylem, 7},
    {"_medfate_psiCrit", (DL_FUNC) &_medfate_psiCrit, 2},
    {"_medfate_E2psiXylem", (DL_FUNC) &_medfate_E2psiXylem, 8},
    {"_medfate_Ecrit", (DL_FUNC) &_medfate_Ecrit, 4},
    {"_medfate_regulatedPsiXylem", (DL_FUNC) &_medfate_regulatedPsiXylem, 6},
    {"_medfate_supplyFunctionOneXylem", (DL_FUNC) &_medfate_supplyFunctionOneXylem, 10},
    {"_medfate_vanGenuchtenConductance", (DL_FUNC) &_medfate_vanGenuchtenConductance, 4},
    {"_medfate_E2psiVanGenuchten", (DL_FUNC) &_medfate_E2psiVanGenuchten, 7},
    {"_medfate_EVanGenuchten", (DL_FUNC) &_medfate_EVanGenuchten, 8},
    {"_medfate_E2psiTwoElements", (DL_FUNC) &_medfate_E2psiTwoElements, 11},
    {"_medfate_supplyFunctionTwoElements", (DL_FUNC) &_medfate_supplyFunctionTwoElements, 11},
    {"_medfate_regulatedPsiTwoElements", (DL_FUNC) &_medfate_regulatedPsiTwoElements, 10},
    {"_medfate_E2psiNetwork", (DL_FUNC) &_medfate_E2psiNetwork, 18},
    {"_medfate_averageRhizosphereResistancePercent", (DL_FUNC) &_medfate_averageRhizosphereResistancePercent, 10},
    {"_medfate_findRhizosphereMaximumConductance", (DL_FUNC) &_medfate_findRhizosphereMaximumConductance, 9},
    {"_medfate_supplyFunctionNetwork", (DL_FUNC) &_medfate_supplyFunctionNetwork, 17},
    {"_medfate_maximumStemHydraulicConductance", (DL_FUNC) &_medfate_maximumStemHydraulicConductance, 3},
    {"_medfate_parcohort", (DL_FUNC) &_medfate_parcohort, 5},
    {"_medfate_parheight", (DL_FUNC) &_medfate_parheight, 6},
    {"_medfate_swrheight", (DL_FUNC) &_medfate_swrheight, 6},
    {"_medfate_parExtinctionProfile", (DL_FUNC) &_medfate_parExtinctionProfile, 4},
    {"_medfate_swrExtinctionProfile", (DL_FUNC) &_medfate_swrExtinctionProfile, 4},
    {"_medfate_cohortAbsorbedSWRFraction", (DL_FUNC) &_medfate_cohortAbsorbedSWRFraction, 4},
    {"_medfate_layerIrradianceFraction", (DL_FUNC) &_medfate_layerIrradianceFraction, 4},
    {"_medfate_cohortSunlitShadeAbsorbedRadiation", (DL_FUNC) &_medfate_cohortSunlitShadeAbsorbedRadiation, 11},
    {"_medfate_layerSunlitFraction", (DL_FUNC) &_medfate_layerSunlitFraction, 3},
    {"_medfate_checkSpeciesParameters", (DL_FUNC) &_medfate_checkSpeciesParameters, 2},
    {"_medfate_swbInput", (DL_FUNC) &_medfate_swbInput, 5},
    {"_medfate_forest2swbInput", (DL_FUNC) &_medfate_forest2swbInput, 4},
    {"_medfate_growthInput", (DL_FUNC) &_medfate_growthInput, 6},
    {"_medfate_forest2growthInput", (DL_FUNC) &_medfate_forest2growthInput, 4},
    {"_medfate_gammaTemp", (DL_FUNC) &_medfate_gammaTemp, 1},
    {"_medfate_KmTemp", (DL_FUNC) &_medfate_KmTemp, 2},
    {"_medfate_VmaxTemp", (DL_FUNC) &_medfate_VmaxTemp, 2},
    {"_medfate_JmaxTemp", (DL_FUNC) &_medfate_JmaxTemp, 2},
    {"_medfate_electronLimitedPhotosynthesis", (DL_FUNC) &_medfate_electronLimitedPhotosynthesis, 4},
    {"_medfate_rubiscoLimitedPhotosynthesis", (DL_FUNC) &_medfate_rubiscoLimitedPhotosynthesis, 4},
    {"_medfate_photosynthesis", (DL_FUNC) &_medfate_photosynthesis, 7},
    {"_medfate_leafPhotosynthesisFunction", (DL_FUNC) &_medfate_leafPhotosynthesisFunction, 14},
    {"_medfate_sunshadePhotosynthesisFunction", (DL_FUNC) &_medfate_sunshadePhotosynthesisFunction, 19},
    {"_medfate_multilayerPhotosynthesisFunction", (DL_FUNC) &_medfate_multilayerPhotosynthesisFunction, 17},
    {"_medfate_profitMaximization", (DL_FUNC) &_medfate_profitMaximization, 2},
    {"_medfate_profitMaximization2", (DL_FUNC) &_medfate_profitMaximization2, 3},
    {"_medfate_profitMaximization3", (DL_FUNC) &_medfate_profitMaximization3, 3},
    {"_medfate_conicDistribution", (DL_FUNC) &_medfate_conicDistribution, 2},
    {"_medfate_ldrDistribution", (DL_FUNC) &_medfate_ldrDistribution, 3},
    {"_medfate_xylemConductanceProportions", (DL_FUNC) &_medfate_xylemConductanceProportions, 3},
    {"_medfate_theta2psi", (DL_FUNC) &_medfate_theta2psi, 3},
    {"_medfate_psi2theta", (DL_FUNC) &_medfate_psi2theta, 3},
    {"_medfate_soilUSDAType", (DL_FUNC) &_medfate_soilUSDAType, 2},
    {"_medfate_vanGenuchtenParams", (DL_FUNC) &_medfate_vanGenuchtenParams, 1},
    {"_medfate_soil", (DL_FUNC) &_medfate_soil, 2},
    {"_medfate_er", (DL_FUNC) &_medfate_er, 3},
    {"_medfate_gdd", (DL_FUNC) &_medfate_gdd, 3},
    {"_medfate_soilevaporation", (DL_FUNC) &_medfate_soilevaporation, 3},
    {"_medfate_infiltrationDay", (DL_FUNC) &_medfate_infiltrationDay, 2},
    {"_medfate_interceptionGashDay", (DL_FUNC) &_medfate_interceptionGashDay, 4},
    {"_medfate_swbDay1", (DL_FUNC) &_medfate_swbDay1, 8},
    {"_medfate_swbDay2", (DL_FUNC) &_medfate_swbDay2, 18},
    {"_medfate_swbDay", (DL_FUNC) &_medfate_swbDay, 17},
    {"_medfate_swbgridDay", (DL_FUNC) &_medfate_swbgridDay, 11},
    {"_medfate_swb", (DL_FUNC) &_medfate_swb, 7},
    {"_medfate_windSpeedAtCanopyHeight", (DL_FUNC) &_medfate_windSpeedAtCanopyHeight, 2},
    {"_medfate_unshelteredMidflameWindSpeed", (DL_FUNC) &_medfate_unshelteredMidflameWindSpeed, 2},
    {"_medfate_shelteredMidflameWindSpeed", (DL_FUNC) &_medfate_shelteredMidflameWindSpeed, 3},
    {"_medfate_windAdjustmentFactor", (DL_FUNC) &_medfate_windAdjustmentFactor, 4},
    {"_medfate_windSpeedAtHeightOverCanopy", (DL_FUNC) &_medfate_windSpeedAtHeightOverCanopy, 3},
    {"_medfate_windExtinctionProfile", (DL_FUNC) &_medfate_windExtinctionProfile, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_medfate(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
